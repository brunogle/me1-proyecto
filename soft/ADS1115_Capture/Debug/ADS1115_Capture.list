
ADS1115_Capture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b58  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08003cf8  08003cf8  00013cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d4c  08003d4c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d4c  08003d4c  00013d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d54  08003d54  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d54  08003d54  00013d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d58  08003d58  00013d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003d5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  2000005c  08003db8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08003db8  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a418  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000173b  00000000  00000000  0002a4e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000910  00000000  00000000  0002bc28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000071c  00000000  00000000  0002c538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016848  00000000  00000000  0002cc54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b42d  00000000  00000000  0004349c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f4a3  00000000  00000000  0004e8c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002a9c  00000000  00000000  000ddd6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000e0808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003ce0 	.word	0x08003ce0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08003ce0 	.word	0x08003ce0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800058a:	2b00      	cmp	r3, #0
 800058c:	db0b      	blt.n	80005a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	f003 021f 	and.w	r2, r3, #31
 8000594:	4907      	ldr	r1, [pc, #28]	; (80005b4 <__NVIC_EnableIRQ+0x38>)
 8000596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800059a:	095b      	lsrs	r3, r3, #5
 800059c:	2001      	movs	r0, #1
 800059e:	fa00 f202 	lsl.w	r2, r0, r2
 80005a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	e000e100 	.word	0xe000e100

080005b8 <ADS1115_INIT>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void ADS1115_INIT(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af02      	add	r7, sp, #8

	uint8_t i2c_tx_data[3];


	//CONFIG
	i2c_tx_data[0]= CONFIG_REG_ADDR; //Conf Reg Address
 80005be:	2301      	movs	r3, #1
 80005c0:	713b      	strb	r3, [r7, #4]
	i2c_tx_data[1] = CONFIG_REG_MSB; //MSB Conf Reg
 80005c2:	23c3      	movs	r3, #195	; 0xc3
 80005c4:	717b      	strb	r3, [r7, #5]
	i2c_tx_data[2] = CONFIG_REG_LSB; //LSB Conf Reg
 80005c6:	23e0      	movs	r3, #224	; 0xe0
 80005c8:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, CONTROL_BYTE_W, i2c_tx_data, 3*8, HAL_MAX_DELAY);
 80005ca:	1d3a      	adds	r2, r7, #4
 80005cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2318      	movs	r3, #24
 80005d4:	2190      	movs	r1, #144	; 0x90
 80005d6:	4817      	ldr	r0, [pc, #92]	; (8000634 <ADS1115_INIT+0x7c>)
 80005d8:	f001 f818 	bl	800160c <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 80005dc:	2014      	movs	r0, #20
 80005de:	f000 fbcb 	bl	8000d78 <HAL_Delay>

	i2c_tx_data[0] = LOW_THRESHOLD_RED_ADDR; //Lo-threshold Register Address
 80005e2:	2302      	movs	r3, #2
 80005e4:	713b      	strb	r3, [r7, #4]
	i2c_tx_data[1] = 0x00; //MSB lo-t Reg
 80005e6:	2300      	movs	r3, #0
 80005e8:	717b      	strb	r3, [r7, #5]
	i2c_tx_data[2] = 0x00; //LSB lo-t Reg
 80005ea:	2300      	movs	r3, #0
 80005ec:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, CONTROL_BYTE_W, i2c_tx_data, 3*8, HAL_MAX_DELAY);
 80005ee:	1d3a      	adds	r2, r7, #4
 80005f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	2318      	movs	r3, #24
 80005f8:	2190      	movs	r1, #144	; 0x90
 80005fa:	480e      	ldr	r0, [pc, #56]	; (8000634 <ADS1115_INIT+0x7c>)
 80005fc:	f001 f806 	bl	800160c <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8000600:	2014      	movs	r0, #20
 8000602:	f000 fbb9 	bl	8000d78 <HAL_Delay>

	i2c_tx_data[0] = HIGH_THROSHOLD_REG_ADDR; //Hi-threshold Register Address
 8000606:	2303      	movs	r3, #3
 8000608:	713b      	strb	r3, [r7, #4]
	i2c_tx_data[1] = 0xFF; //MSB hi-t Reg
 800060a:	23ff      	movs	r3, #255	; 0xff
 800060c:	717b      	strb	r3, [r7, #5]
	i2c_tx_data[2] = 0xFF; //LSB hi-t Reg
 800060e:	23ff      	movs	r3, #255	; 0xff
 8000610:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, CONTROL_BYTE_W, i2c_tx_data, 3*8, HAL_MAX_DELAY);
 8000612:	1d3a      	adds	r2, r7, #4
 8000614:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	2318      	movs	r3, #24
 800061c:	2190      	movs	r1, #144	; 0x90
 800061e:	4805      	ldr	r0, [pc, #20]	; (8000634 <ADS1115_INIT+0x7c>)
 8000620:	f000 fff4 	bl	800160c <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8000624:	2014      	movs	r0, #20
 8000626:	f000 fba7 	bl	8000d78 <HAL_Delay>
	//TxBuffer[0] = 0x00; //Conversion Register Address
	//HAL_I2C_Master_Transmit(&hi2c1, CONTROL_BYTE_W, TxBuffer, 8, HAL_MAX_DELAY);
	//HAL_Delay(20);


}
 800062a:	bf00      	nop
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	20000078 	.word	0x20000078

08000638 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000638:	b580      	push	{r7, lr}
 800063a:	b08c      	sub	sp, #48	; 0x30
 800063c:	af04      	add	r7, sp, #16
 800063e:	4603      	mov	r3, r0
 8000640:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == DRDY_Pin)
 8000642:	88fb      	ldrh	r3, [r7, #6]
 8000644:	2b02      	cmp	r3, #2
 8000646:	d126      	bne.n	8000696 <HAL_GPIO_EXTI_Callback+0x5e>
	{

		char tx_value_str[12];
		uint8_t i2c_rx_data[2];

		HAL_I2C_Mem_Read(&hi2c1, CONTROL_BYTE_R, 0, 1, i2c_rx_data, 2, HAL_MAX_DELAY);
 8000648:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800064c:	9302      	str	r3, [sp, #8]
 800064e:	2302      	movs	r3, #2
 8000650:	9301      	str	r3, [sp, #4]
 8000652:	f107 030c 	add.w	r3, r7, #12
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2301      	movs	r3, #1
 800065a:	2200      	movs	r2, #0
 800065c:	2191      	movs	r1, #145	; 0x91
 800065e:	4810      	ldr	r0, [pc, #64]	; (80006a0 <HAL_GPIO_EXTI_Callback+0x68>)
 8000660:	f001 f8d2 	bl	8001808 <HAL_I2C_Mem_Read>

		uint16_t conversion_value = (i2c_rx_data[0] << 8) | (i2c_rx_data[1]);
 8000664:	7b3b      	ldrb	r3, [r7, #12]
 8000666:	021b      	lsls	r3, r3, #8
 8000668:	b21a      	sxth	r2, r3
 800066a:	7b7b      	ldrb	r3, [r7, #13]
 800066c:	b21b      	sxth	r3, r3
 800066e:	4313      	orrs	r3, r2
 8000670:	b21b      	sxth	r3, r3
 8000672:	83fb      	strh	r3, [r7, #30]

		uint16_t nbytes = sprintf(tx_value_str, "%d\n\r", conversion_value);
 8000674:	8bfa      	ldrh	r2, [r7, #30]
 8000676:	f107 0310 	add.w	r3, r7, #16
 800067a:	490a      	ldr	r1, [pc, #40]	; (80006a4 <HAL_GPIO_EXTI_Callback+0x6c>)
 800067c:	4618      	mov	r0, r3
 800067e:	f002 fe8b 	bl	8003398 <siprintf>
 8000682:	4603      	mov	r3, r0
 8000684:	83bb      	strh	r3, [r7, #28]

		HAL_UART_Transmit(&huart2, tx_value_str, nbytes, HAL_MAX_DELAY);
 8000686:	8bba      	ldrh	r2, [r7, #28]
 8000688:	f107 0110 	add.w	r1, r7, #16
 800068c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000690:	4805      	ldr	r0, [pc, #20]	; (80006a8 <HAL_GPIO_EXTI_Callback+0x70>)
 8000692:	f002 fb0c 	bl	8002cae <HAL_UART_Transmit>

	}

}
 8000696:	bf00      	nop
 8000698:	3720      	adds	r7, #32
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000078 	.word	0x20000078
 80006a4:	08003cf8 	.word	0x08003cf8
 80006a8:	200000cc 	.word	0x200000cc

080006ac <TIM4_IRQHandler>:


void TIM4_IRQHandler(TIM_HandleTypeDef *htim){
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af02      	add	r7, sp, #8
 80006b2:	6078      	str	r0, [r7, #4]
  if(TIM4->SR & TIM_SR_UIF)
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <TIM4_IRQHandler+0x50>)
 80006b6:	691b      	ldr	r3, [r3, #16]
 80006b8:	f003 0301 	and.w	r3, r3, #1
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d018      	beq.n	80006f2 <TIM4_IRQHandler+0x46>
  {

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80006c0:	2120      	movs	r1, #32
 80006c2:	480f      	ldr	r0, [pc, #60]	; (8000700 <TIM4_IRQHandler+0x54>)
 80006c4:	f000 fe2b 	bl	800131e <HAL_GPIO_TogglePin>

	uint8_t i2c_tx_data[3];

	i2c_tx_data[0]= CONFIG_REG_ADDR; //Conf Reg Address
 80006c8:	2301      	movs	r3, #1
 80006ca:	733b      	strb	r3, [r7, #12]
	i2c_tx_data[1] = CONFIG_REG_MSB; //MSB Conf Reg
 80006cc:	23c3      	movs	r3, #195	; 0xc3
 80006ce:	737b      	strb	r3, [r7, #13]
	i2c_tx_data[2] = CONFIG_REG_LSB; //LSB Conf Reg Para 860SPS
 80006d0:	23e0      	movs	r3, #224	; 0xe0
 80006d2:	73bb      	strb	r3, [r7, #14]


	HAL_I2C_Master_Transmit(&hi2c1, CONTROL_BYTE_W, i2c_tx_data, 3*8, HAL_MAX_DELAY);
 80006d4:	f107 020c 	add.w	r2, r7, #12
 80006d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006dc:	9300      	str	r3, [sp, #0]
 80006de:	2318      	movs	r3, #24
 80006e0:	2190      	movs	r1, #144	; 0x90
 80006e2:	4808      	ldr	r0, [pc, #32]	; (8000704 <TIM4_IRQHandler+0x58>)
 80006e4:	f000 ff92 	bl	800160c <HAL_I2C_Master_Transmit>

	TIM4->SR &= 0;
 80006e8:	4b04      	ldr	r3, [pc, #16]	; (80006fc <TIM4_IRQHandler+0x50>)
 80006ea:	691b      	ldr	r3, [r3, #16]
 80006ec:	4b03      	ldr	r3, [pc, #12]	; (80006fc <TIM4_IRQHandler+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	611a      	str	r2, [r3, #16]
  }

}
 80006f2:	bf00      	nop
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40000800 	.word	0x40000800
 8000700:	40020000 	.word	0x40020000
 8000704:	20000078 	.word	0x20000078

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800070c:	f000 fac2 	bl	8000c94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000710:	f000 f834 	bl	800077c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000714:	f000 f8f6 	bl	8000904 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000718:	f000 f8ca 	bl	80008b0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800071c:	f000 f89a 	bl	8000854 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  ADS1115_INIT();
 8000720:	f7ff ff4a 	bl	80005b8 <ADS1115_INIT>


  //Configuro manualmente TIM4 para samplear a 500SPS.
  //El generador de codigo de STM32CubeIDE no funciona... :(

  RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8000724:	4b13      	ldr	r3, [pc, #76]	; (8000774 <main+0x6c>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000728:	4a12      	ldr	r2, [pc, #72]	; (8000774 <main+0x6c>)
 800072a:	f043 0304 	orr.w	r3, r3, #4
 800072e:	6413      	str	r3, [r2, #64]	; 0x40
  TIM4->PSC = 2	;
 8000730:	4b11      	ldr	r3, [pc, #68]	; (8000778 <main+0x70>)
 8000732:	2202      	movs	r2, #2
 8000734:	629a      	str	r2, [r3, #40]	; 0x28
  TIM4->ARR = 55999;
 8000736:	4b10      	ldr	r3, [pc, #64]	; (8000778 <main+0x70>)
 8000738:	f64d 22bf 	movw	r2, #55999	; 0xdabf
 800073c:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM4->DIER |= TIM_DIER_UIE;
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <main+0x70>)
 8000740:	68db      	ldr	r3, [r3, #12]
 8000742:	4a0d      	ldr	r2, [pc, #52]	; (8000778 <main+0x70>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	60d3      	str	r3, [r2, #12]
  TIM4->SR &= ~TIM_SR_UIF;
 800074a:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <main+0x70>)
 800074c:	691b      	ldr	r3, [r3, #16]
 800074e:	4a0a      	ldr	r2, [pc, #40]	; (8000778 <main+0x70>)
 8000750:	f023 0301 	bic.w	r3, r3, #1
 8000754:	6113      	str	r3, [r2, #16]
  NVIC_EnableIRQ(TIM4_IRQn);
 8000756:	201e      	movs	r0, #30
 8000758:	f7ff ff10 	bl	800057c <__NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800075c:	2200      	movs	r2, #0
 800075e:	2100      	movs	r1, #0
 8000760:	201e      	movs	r0, #30
 8000762:	f000 fc08 	bl	8000f76 <HAL_NVIC_SetPriority>
  TIM4->CR1 |= TIM_CR1_CEN;
 8000766:	4b04      	ldr	r3, [pc, #16]	; (8000778 <main+0x70>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a03      	ldr	r2, [pc, #12]	; (8000778 <main+0x70>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6013      	str	r3, [r2, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000772:	e7fe      	b.n	8000772 <main+0x6a>
 8000774:	40023800 	.word	0x40023800
 8000778:	40000800 	.word	0x40000800

0800077c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b094      	sub	sp, #80	; 0x50
 8000780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000782:	f107 0320 	add.w	r3, r7, #32
 8000786:	2230      	movs	r2, #48	; 0x30
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f002 fe24 	bl	80033d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a0:	2300      	movs	r3, #0
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	4b29      	ldr	r3, [pc, #164]	; (800084c <SystemClock_Config+0xd0>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a8:	4a28      	ldr	r2, [pc, #160]	; (800084c <SystemClock_Config+0xd0>)
 80007aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ae:	6413      	str	r3, [r2, #64]	; 0x40
 80007b0:	4b26      	ldr	r3, [pc, #152]	; (800084c <SystemClock_Config+0xd0>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007bc:	2300      	movs	r3, #0
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	4b23      	ldr	r3, [pc, #140]	; (8000850 <SystemClock_Config+0xd4>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007c8:	4a21      	ldr	r2, [pc, #132]	; (8000850 <SystemClock_Config+0xd4>)
 80007ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007ce:	6013      	str	r3, [r2, #0]
 80007d0:	4b1f      	ldr	r3, [pc, #124]	; (8000850 <SystemClock_Config+0xd4>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007dc:	2302      	movs	r3, #2
 80007de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e0:	2301      	movs	r3, #1
 80007e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e4:	2310      	movs	r3, #16
 80007e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e8:	2302      	movs	r3, #2
 80007ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ec:	2300      	movs	r3, #0
 80007ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007f0:	2310      	movs	r3, #16
 80007f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007f4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80007f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007fa:	2304      	movs	r3, #4
 80007fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007fe:	2307      	movs	r3, #7
 8000800:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000802:	f107 0320 	add.w	r3, r7, #32
 8000806:	4618      	mov	r0, r3
 8000808:	f001 fd6c 	bl	80022e4 <HAL_RCC_OscConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000812:	f000 f8d7 	bl	80009c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000816:	230f      	movs	r3, #15
 8000818:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081a:	2302      	movs	r3, #2
 800081c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000822:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000826:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800082c:	f107 030c 	add.w	r3, r7, #12
 8000830:	2102      	movs	r1, #2
 8000832:	4618      	mov	r0, r3
 8000834:	f001 ffce 	bl	80027d4 <HAL_RCC_ClockConfig>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800083e:	f000 f8c1 	bl	80009c4 <Error_Handler>
  }
}
 8000842:	bf00      	nop
 8000844:	3750      	adds	r7, #80	; 0x50
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40023800 	.word	0x40023800
 8000850:	40007000 	.word	0x40007000

08000854 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <MX_I2C1_Init+0x50>)
 800085a:	4a13      	ldr	r2, [pc, #76]	; (80008a8 <MX_I2C1_Init+0x54>)
 800085c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800085e:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000860:	4a12      	ldr	r2, [pc, #72]	; (80008ac <MX_I2C1_Init+0x58>)
 8000862:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <MX_I2C1_Init+0x50>)
 800086c:	2200      	movs	r2, #0
 800086e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000872:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000876:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000878:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <MX_I2C1_Init+0x50>)
 800087a:	2200      	movs	r2, #0
 800087c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000884:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_I2C1_Init+0x50>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000890:	4804      	ldr	r0, [pc, #16]	; (80008a4 <MX_I2C1_Init+0x50>)
 8000892:	f000 fd77 	bl	8001384 <HAL_I2C_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800089c:	f000 f892 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000078 	.word	0x20000078
 80008a8:	40005400 	.word	0x40005400
 80008ac:	000186a0 	.word	0x000186a0

080008b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_USART2_UART_Init+0x4c>)
 80008b6:	4a12      	ldr	r2, [pc, #72]	; (8000900 <MX_USART2_UART_Init+0x50>)
 80008b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <MX_USART2_UART_Init+0x4c>)
 80008bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_USART2_UART_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <MX_USART2_UART_Init+0x4c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <MX_USART2_UART_Init+0x4c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008d4:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_USART2_UART_Init+0x4c>)
 80008d6:	220c      	movs	r2, #12
 80008d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <MX_USART2_UART_Init+0x4c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <MX_USART2_UART_Init+0x4c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008e6:	4805      	ldr	r0, [pc, #20]	; (80008fc <MX_USART2_UART_Init+0x4c>)
 80008e8:	f002 f994 	bl	8002c14 <HAL_UART_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008f2:	f000 f867 	bl	80009c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	200000cc 	.word	0x200000cc
 8000900:	40004400 	.word	0x40004400

08000904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b088      	sub	sp, #32
 8000908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	f107 030c 	add.w	r3, r7, #12
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	4b27      	ldr	r3, [pc, #156]	; (80009bc <MX_GPIO_Init+0xb8>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	4a26      	ldr	r2, [pc, #152]	; (80009bc <MX_GPIO_Init+0xb8>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6313      	str	r3, [r2, #48]	; 0x30
 800092a:	4b24      	ldr	r3, [pc, #144]	; (80009bc <MX_GPIO_Init+0xb8>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	4b20      	ldr	r3, [pc, #128]	; (80009bc <MX_GPIO_Init+0xb8>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a1f      	ldr	r2, [pc, #124]	; (80009bc <MX_GPIO_Init+0xb8>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b1d      	ldr	r3, [pc, #116]	; (80009bc <MX_GPIO_Init+0xb8>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	2120      	movs	r1, #32
 8000956:	481a      	ldr	r0, [pc, #104]	; (80009c0 <MX_GPIO_Init+0xbc>)
 8000958:	f000 fcc8 	bl	80012ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_OLD_Pin DRDY_Pin */
  GPIO_InitStruct.Pin = DRDY_OLD_Pin|DRDY_Pin;
 800095c:	2303      	movs	r3, #3
 800095e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000960:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000964:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096a:	f107 030c 	add.w	r3, r7, #12
 800096e:	4619      	mov	r1, r3
 8000970:	4813      	ldr	r0, [pc, #76]	; (80009c0 <MX_GPIO_Init+0xbc>)
 8000972:	f000 fb37 	bl	8000fe4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000976:	2320      	movs	r3, #32
 8000978:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000986:	f107 030c 	add.w	r3, r7, #12
 800098a:	4619      	mov	r1, r3
 800098c:	480c      	ldr	r0, [pc, #48]	; (80009c0 <MX_GPIO_Init+0xbc>)
 800098e:	f000 fb29 	bl	8000fe4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000992:	2200      	movs	r2, #0
 8000994:	2100      	movs	r1, #0
 8000996:	2006      	movs	r0, #6
 8000998:	f000 faed 	bl	8000f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800099c:	2006      	movs	r0, #6
 800099e:	f000 fb06 	bl	8000fae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2100      	movs	r1, #0
 80009a6:	2007      	movs	r0, #7
 80009a8:	f000 fae5 	bl	8000f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80009ac:	2007      	movs	r0, #7
 80009ae:	f000 fafe 	bl	8000fae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009b2:	bf00      	nop
 80009b4:	3720      	adds	r7, #32
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40020000 	.word	0x40020000

080009c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c8:	b672      	cpsid	i
}
 80009ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009cc:	e7fe      	b.n	80009cc <Error_Handler+0x8>
	...

080009d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <HAL_MspInit+0x4c>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009de:	4a0f      	ldr	r2, [pc, #60]	; (8000a1c <HAL_MspInit+0x4c>)
 80009e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e4:	6453      	str	r3, [r2, #68]	; 0x44
 80009e6:	4b0d      	ldr	r3, [pc, #52]	; (8000a1c <HAL_MspInit+0x4c>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	603b      	str	r3, [r7, #0]
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <HAL_MspInit+0x4c>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	4a08      	ldr	r2, [pc, #32]	; (8000a1c <HAL_MspInit+0x4c>)
 80009fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a00:	6413      	str	r3, [r2, #64]	; 0x40
 8000a02:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <HAL_MspInit+0x4c>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a0e:	2007      	movs	r0, #7
 8000a10:	f000 faa6 	bl	8000f60 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a14:	bf00      	nop
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40023800 	.word	0x40023800

08000a20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08a      	sub	sp, #40	; 0x28
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a19      	ldr	r2, [pc, #100]	; (8000aa4 <HAL_I2C_MspInit+0x84>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d12b      	bne.n	8000a9a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	613b      	str	r3, [r7, #16]
 8000a46:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <HAL_I2C_MspInit+0x88>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	4a17      	ldr	r2, [pc, #92]	; (8000aa8 <HAL_I2C_MspInit+0x88>)
 8000a4c:	f043 0302 	orr.w	r3, r3, #2
 8000a50:	6313      	str	r3, [r2, #48]	; 0x30
 8000a52:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <HAL_I2C_MspInit+0x88>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	f003 0302 	and.w	r3, r3, #2
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a5e:	23c0      	movs	r3, #192	; 0xc0
 8000a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a62:	2312      	movs	r3, #18
 8000a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a6e:	2304      	movs	r3, #4
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	4619      	mov	r1, r3
 8000a78:	480c      	ldr	r0, [pc, #48]	; (8000aac <HAL_I2C_MspInit+0x8c>)
 8000a7a:	f000 fab3 	bl	8000fe4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <HAL_I2C_MspInit+0x88>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	4a08      	ldr	r2, [pc, #32]	; (8000aa8 <HAL_I2C_MspInit+0x88>)
 8000a88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <HAL_I2C_MspInit+0x88>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a9a:	bf00      	nop
 8000a9c:	3728      	adds	r7, #40	; 0x28
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40005400 	.word	0x40005400
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40020400 	.word	0x40020400

08000ab0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08a      	sub	sp, #40	; 0x28
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a19      	ldr	r2, [pc, #100]	; (8000b34 <HAL_UART_MspInit+0x84>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d12b      	bne.n	8000b2a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <HAL_UART_MspInit+0x88>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ada:	4a17      	ldr	r2, [pc, #92]	; (8000b38 <HAL_UART_MspInit+0x88>)
 8000adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <HAL_UART_MspInit+0x88>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <HAL_UART_MspInit+0x88>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a10      	ldr	r2, [pc, #64]	; (8000b38 <HAL_UART_MspInit+0x88>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <HAL_UART_MspInit+0x88>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b0a:	230c      	movs	r3, #12
 8000b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b1a:	2307      	movs	r3, #7
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1e:	f107 0314 	add.w	r3, r7, #20
 8000b22:	4619      	mov	r1, r3
 8000b24:	4805      	ldr	r0, [pc, #20]	; (8000b3c <HAL_UART_MspInit+0x8c>)
 8000b26:	f000 fa5d 	bl	8000fe4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b2a:	bf00      	nop
 8000b2c:	3728      	adds	r7, #40	; 0x28
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40004400 	.word	0x40004400
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40020000 	.word	0x40020000

08000b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <NMI_Handler+0x4>

08000b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <HardFault_Handler+0x4>

08000b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <MemManage_Handler+0x4>

08000b52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <BusFault_Handler+0x4>

08000b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <UsageFault_Handler+0x4>

08000b5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b8c:	f000 f8d4 	bl	8000d38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY_OLD_Pin);
 8000b98:	2001      	movs	r0, #1
 8000b9a:	f000 fbdb 	bl	8001354 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DRDY_Pin);
 8000ba6:	2002      	movs	r0, #2
 8000ba8:	f000 fbd4 	bl	8001354 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb8:	4a14      	ldr	r2, [pc, #80]	; (8000c0c <_sbrk+0x5c>)
 8000bba:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <_sbrk+0x60>)
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc4:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <_sbrk+0x64>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d102      	bne.n	8000bd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bcc:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <_sbrk+0x64>)
 8000bce:	4a12      	ldr	r2, [pc, #72]	; (8000c18 <_sbrk+0x68>)
 8000bd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bd2:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <_sbrk+0x64>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d207      	bcs.n	8000bf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000be0:	f002 fc02 	bl	80033e8 <__errno>
 8000be4:	4603      	mov	r3, r0
 8000be6:	220c      	movs	r2, #12
 8000be8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bee:	e009      	b.n	8000c04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bf0:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <_sbrk+0x64>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bf6:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <_sbrk+0x64>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	4a05      	ldr	r2, [pc, #20]	; (8000c14 <_sbrk+0x64>)
 8000c00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c02:	68fb      	ldr	r3, [r7, #12]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3718      	adds	r7, #24
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20018000 	.word	0x20018000
 8000c10:	00000400 	.word	0x00000400
 8000c14:	20000110 	.word	0x20000110
 8000c18:	20000260 	.word	0x20000260

08000c1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <SystemInit+0x20>)
 8000c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c26:	4a05      	ldr	r2, [pc, #20]	; (8000c3c <SystemInit+0x20>)
 8000c28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c44:	480d      	ldr	r0, [pc, #52]	; (8000c7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c46:	490e      	ldr	r1, [pc, #56]	; (8000c80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c48:	4a0e      	ldr	r2, [pc, #56]	; (8000c84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c4c:	e002      	b.n	8000c54 <LoopCopyDataInit>

08000c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c52:	3304      	adds	r3, #4

08000c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c58:	d3f9      	bcc.n	8000c4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c5a:	4a0b      	ldr	r2, [pc, #44]	; (8000c88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c5c:	4c0b      	ldr	r4, [pc, #44]	; (8000c8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c60:	e001      	b.n	8000c66 <LoopFillZerobss>

08000c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c64:	3204      	adds	r2, #4

08000c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c68:	d3fb      	bcc.n	8000c62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c6a:	f7ff ffd7 	bl	8000c1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c6e:	f002 fbc1 	bl	80033f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c72:	f7ff fd49 	bl	8000708 <main>
  bx  lr    
 8000c76:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c78:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c80:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c84:	08003d5c 	.word	0x08003d5c
  ldr r2, =_sbss
 8000c88:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c8c:	20000260 	.word	0x20000260

08000c90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c90:	e7fe      	b.n	8000c90 <ADC_IRQHandler>
	...

08000c94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c98:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <HAL_Init+0x40>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a0d      	ldr	r2, [pc, #52]	; (8000cd4 <HAL_Init+0x40>)
 8000c9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ca2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ca4:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <HAL_Init+0x40>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a0a      	ldr	r2, [pc, #40]	; (8000cd4 <HAL_Init+0x40>)
 8000caa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb0:	4b08      	ldr	r3, [pc, #32]	; (8000cd4 <HAL_Init+0x40>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a07      	ldr	r2, [pc, #28]	; (8000cd4 <HAL_Init+0x40>)
 8000cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cbc:	2003      	movs	r0, #3
 8000cbe:	f000 f94f 	bl	8000f60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f000 f808 	bl	8000cd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc8:	f7ff fe82 	bl	80009d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40023c00 	.word	0x40023c00

08000cd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <HAL_InitTick+0x54>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <HAL_InitTick+0x58>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	4619      	mov	r1, r3
 8000cea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f000 f967 	bl	8000fca <HAL_SYSTICK_Config>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e00e      	b.n	8000d24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2b0f      	cmp	r3, #15
 8000d0a:	d80a      	bhi.n	8000d22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	6879      	ldr	r1, [r7, #4]
 8000d10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d14:	f000 f92f 	bl	8000f76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d18:	4a06      	ldr	r2, [pc, #24]	; (8000d34 <HAL_InitTick+0x5c>)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	e000      	b.n	8000d24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000000 	.word	0x20000000
 8000d30:	20000008 	.word	0x20000008
 8000d34:	20000004 	.word	0x20000004

08000d38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <HAL_IncTick+0x20>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	461a      	mov	r2, r3
 8000d42:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <HAL_IncTick+0x24>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4413      	add	r3, r2
 8000d48:	4a04      	ldr	r2, [pc, #16]	; (8000d5c <HAL_IncTick+0x24>)
 8000d4a:	6013      	str	r3, [r2, #0]
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	20000008 	.word	0x20000008
 8000d5c:	20000114 	.word	0x20000114

08000d60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  return uwTick;
 8000d64:	4b03      	ldr	r3, [pc, #12]	; (8000d74 <HAL_GetTick+0x14>)
 8000d66:	681b      	ldr	r3, [r3, #0]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	20000114 	.word	0x20000114

08000d78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d80:	f7ff ffee 	bl	8000d60 <HAL_GetTick>
 8000d84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000d90:	d005      	beq.n	8000d9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d92:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <HAL_Delay+0x44>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	461a      	mov	r2, r3
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d9e:	bf00      	nop
 8000da0:	f7ff ffde 	bl	8000d60 <HAL_GetTick>
 8000da4:	4602      	mov	r2, r0
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	68fa      	ldr	r2, [r7, #12]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d8f7      	bhi.n	8000da0 <HAL_Delay+0x28>
  {
  }
}
 8000db0:	bf00      	nop
 8000db2:	bf00      	nop
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000008 	.word	0x20000008

08000dc0 <__NVIC_SetPriorityGrouping>:
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dd6:	68ba      	ldr	r2, [r7, #8]
 8000dd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ddc:	4013      	ands	r3, r2
 8000dde:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000df2:	4a04      	ldr	r2, [pc, #16]	; (8000e04 <__NVIC_SetPriorityGrouping+0x44>)
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	60d3      	str	r3, [r2, #12]
}
 8000df8:	bf00      	nop
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <__NVIC_GetPriorityGrouping>:
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e0c:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <__NVIC_GetPriorityGrouping+0x18>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	0a1b      	lsrs	r3, r3, #8
 8000e12:	f003 0307 	and.w	r3, r3, #7
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <__NVIC_EnableIRQ>:
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	db0b      	blt.n	8000e4e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	f003 021f 	and.w	r2, r3, #31
 8000e3c:	4907      	ldr	r1, [pc, #28]	; (8000e5c <__NVIC_EnableIRQ+0x38>)
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	095b      	lsrs	r3, r3, #5
 8000e44:	2001      	movs	r0, #1
 8000e46:	fa00 f202 	lsl.w	r2, r0, r2
 8000e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	e000e100 	.word	0xe000e100

08000e60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	6039      	str	r1, [r7, #0]
 8000e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	db0a      	blt.n	8000e8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	490c      	ldr	r1, [pc, #48]	; (8000eac <__NVIC_SetPriority+0x4c>)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	0112      	lsls	r2, r2, #4
 8000e80:	b2d2      	uxtb	r2, r2
 8000e82:	440b      	add	r3, r1
 8000e84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e88:	e00a      	b.n	8000ea0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	4908      	ldr	r1, [pc, #32]	; (8000eb0 <__NVIC_SetPriority+0x50>)
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	f003 030f 	and.w	r3, r3, #15
 8000e96:	3b04      	subs	r3, #4
 8000e98:	0112      	lsls	r2, r2, #4
 8000e9a:	b2d2      	uxtb	r2, r2
 8000e9c:	440b      	add	r3, r1
 8000e9e:	761a      	strb	r2, [r3, #24]
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000e100 	.word	0xe000e100
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b089      	sub	sp, #36	; 0x24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	f1c3 0307 	rsb	r3, r3, #7
 8000ece:	2b04      	cmp	r3, #4
 8000ed0:	bf28      	it	cs
 8000ed2:	2304      	movcs	r3, #4
 8000ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3304      	adds	r3, #4
 8000eda:	2b06      	cmp	r3, #6
 8000edc:	d902      	bls.n	8000ee4 <NVIC_EncodePriority+0x30>
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	3b03      	subs	r3, #3
 8000ee2:	e000      	b.n	8000ee6 <NVIC_EncodePriority+0x32>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43da      	mvns	r2, r3
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000efc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	fa01 f303 	lsl.w	r3, r1, r3
 8000f06:	43d9      	mvns	r1, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f0c:	4313      	orrs	r3, r2
         );
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3724      	adds	r7, #36	; 0x24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
	...

08000f1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f2c:	d301      	bcc.n	8000f32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e00f      	b.n	8000f52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f32:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <SysTick_Config+0x40>)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f3a:	210f      	movs	r1, #15
 8000f3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f40:	f7ff ff8e 	bl	8000e60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f44:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <SysTick_Config+0x40>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f4a:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <SysTick_Config+0x40>)
 8000f4c:	2207      	movs	r2, #7
 8000f4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	e000e010 	.word	0xe000e010

08000f60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f7ff ff29 	bl	8000dc0 <__NVIC_SetPriorityGrouping>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b086      	sub	sp, #24
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	60b9      	str	r1, [r7, #8]
 8000f80:	607a      	str	r2, [r7, #4]
 8000f82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f88:	f7ff ff3e 	bl	8000e08 <__NVIC_GetPriorityGrouping>
 8000f8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	68b9      	ldr	r1, [r7, #8]
 8000f92:	6978      	ldr	r0, [r7, #20]
 8000f94:	f7ff ff8e 	bl	8000eb4 <NVIC_EncodePriority>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ff5d 	bl	8000e60 <__NVIC_SetPriority>
}
 8000fa6:	bf00      	nop
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff ff31 	bl	8000e24 <__NVIC_EnableIRQ>
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff ffa2 	bl	8000f1c <SysTick_Config>
 8000fd8:	4603      	mov	r3, r0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b089      	sub	sp, #36	; 0x24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
 8000ffe:	e159      	b.n	80012b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001000:	2201      	movs	r2, #1
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	697a      	ldr	r2, [r7, #20]
 8001010:	4013      	ands	r3, r2
 8001012:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	429a      	cmp	r2, r3
 800101a:	f040 8148 	bne.w	80012ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f003 0303 	and.w	r3, r3, #3
 8001026:	2b01      	cmp	r3, #1
 8001028:	d005      	beq.n	8001036 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001032:	2b02      	cmp	r3, #2
 8001034:	d130      	bne.n	8001098 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	2203      	movs	r2, #3
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43db      	mvns	r3, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4013      	ands	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	68da      	ldr	r2, [r3, #12]
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4313      	orrs	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800106c:	2201      	movs	r2, #1
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	091b      	lsrs	r3, r3, #4
 8001082:	f003 0201 	and.w	r2, r3, #1
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4313      	orrs	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0303 	and.w	r3, r3, #3
 80010a0:	2b03      	cmp	r3, #3
 80010a2:	d017      	beq.n	80010d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	2203      	movs	r2, #3
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	689a      	ldr	r2, [r3, #8]
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 0303 	and.w	r3, r3, #3
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d123      	bne.n	8001128 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	08da      	lsrs	r2, r3, #3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3208      	adds	r2, #8
 80010e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	f003 0307 	and.w	r3, r3, #7
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	220f      	movs	r2, #15
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	691a      	ldr	r2, [r3, #16]
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	08da      	lsrs	r2, r3, #3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	3208      	adds	r2, #8
 8001122:	69b9      	ldr	r1, [r7, #24]
 8001124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	2203      	movs	r2, #3
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0203 	and.w	r2, r3, #3
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001164:	2b00      	cmp	r3, #0
 8001166:	f000 80a2 	beq.w	80012ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	4b57      	ldr	r3, [pc, #348]	; (80012cc <HAL_GPIO_Init+0x2e8>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	4a56      	ldr	r2, [pc, #344]	; (80012cc <HAL_GPIO_Init+0x2e8>)
 8001174:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001178:	6453      	str	r3, [r2, #68]	; 0x44
 800117a:	4b54      	ldr	r3, [pc, #336]	; (80012cc <HAL_GPIO_Init+0x2e8>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001186:	4a52      	ldr	r2, [pc, #328]	; (80012d0 <HAL_GPIO_Init+0x2ec>)
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	089b      	lsrs	r3, r3, #2
 800118c:	3302      	adds	r3, #2
 800118e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	f003 0303 	and.w	r3, r3, #3
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	220f      	movs	r2, #15
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43db      	mvns	r3, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4013      	ands	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a49      	ldr	r2, [pc, #292]	; (80012d4 <HAL_GPIO_Init+0x2f0>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d019      	beq.n	80011e6 <HAL_GPIO_Init+0x202>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a48      	ldr	r2, [pc, #288]	; (80012d8 <HAL_GPIO_Init+0x2f4>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d013      	beq.n	80011e2 <HAL_GPIO_Init+0x1fe>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a47      	ldr	r2, [pc, #284]	; (80012dc <HAL_GPIO_Init+0x2f8>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d00d      	beq.n	80011de <HAL_GPIO_Init+0x1fa>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a46      	ldr	r2, [pc, #280]	; (80012e0 <HAL_GPIO_Init+0x2fc>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d007      	beq.n	80011da <HAL_GPIO_Init+0x1f6>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a45      	ldr	r2, [pc, #276]	; (80012e4 <HAL_GPIO_Init+0x300>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d101      	bne.n	80011d6 <HAL_GPIO_Init+0x1f2>
 80011d2:	2304      	movs	r3, #4
 80011d4:	e008      	b.n	80011e8 <HAL_GPIO_Init+0x204>
 80011d6:	2307      	movs	r3, #7
 80011d8:	e006      	b.n	80011e8 <HAL_GPIO_Init+0x204>
 80011da:	2303      	movs	r3, #3
 80011dc:	e004      	b.n	80011e8 <HAL_GPIO_Init+0x204>
 80011de:	2302      	movs	r3, #2
 80011e0:	e002      	b.n	80011e8 <HAL_GPIO_Init+0x204>
 80011e2:	2301      	movs	r3, #1
 80011e4:	e000      	b.n	80011e8 <HAL_GPIO_Init+0x204>
 80011e6:	2300      	movs	r3, #0
 80011e8:	69fa      	ldr	r2, [r7, #28]
 80011ea:	f002 0203 	and.w	r2, r2, #3
 80011ee:	0092      	lsls	r2, r2, #2
 80011f0:	4093      	lsls	r3, r2
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011f8:	4935      	ldr	r1, [pc, #212]	; (80012d0 <HAL_GPIO_Init+0x2ec>)
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	089b      	lsrs	r3, r3, #2
 80011fe:	3302      	adds	r3, #2
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001206:	4b38      	ldr	r3, [pc, #224]	; (80012e8 <HAL_GPIO_Init+0x304>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	43db      	mvns	r3, r3
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	4013      	ands	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800122a:	4a2f      	ldr	r2, [pc, #188]	; (80012e8 <HAL_GPIO_Init+0x304>)
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001230:	4b2d      	ldr	r3, [pc, #180]	; (80012e8 <HAL_GPIO_Init+0x304>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d003      	beq.n	8001254 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	4313      	orrs	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001254:	4a24      	ldr	r2, [pc, #144]	; (80012e8 <HAL_GPIO_Init+0x304>)
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800125a:	4b23      	ldr	r3, [pc, #140]	; (80012e8 <HAL_GPIO_Init+0x304>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	43db      	mvns	r3, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4013      	ands	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800127e:	4a1a      	ldr	r2, [pc, #104]	; (80012e8 <HAL_GPIO_Init+0x304>)
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001284:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <HAL_GPIO_Init+0x304>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d003      	beq.n	80012a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012a8:	4a0f      	ldr	r2, [pc, #60]	; (80012e8 <HAL_GPIO_Init+0x304>)
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3301      	adds	r3, #1
 80012b2:	61fb      	str	r3, [r7, #28]
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	2b0f      	cmp	r3, #15
 80012b8:	f67f aea2 	bls.w	8001000 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
 80012c0:	3724      	adds	r7, #36	; 0x24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40013800 	.word	0x40013800
 80012d4:	40020000 	.word	0x40020000
 80012d8:	40020400 	.word	0x40020400
 80012dc:	40020800 	.word	0x40020800
 80012e0:	40020c00 	.word	0x40020c00
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40013c00 	.word	0x40013c00

080012ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	807b      	strh	r3, [r7, #2]
 80012f8:	4613      	mov	r3, r2
 80012fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012fc:	787b      	ldrb	r3, [r7, #1]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001302:	887a      	ldrh	r2, [r7, #2]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001308:	e003      	b.n	8001312 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800130a:	887b      	ldrh	r3, [r7, #2]
 800130c:	041a      	lsls	r2, r3, #16
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	619a      	str	r2, [r3, #24]
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800131e:	b480      	push	{r7}
 8001320:	b085      	sub	sp, #20
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
 8001326:	460b      	mov	r3, r1
 8001328:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001330:	887a      	ldrh	r2, [r7, #2]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	4013      	ands	r3, r2
 8001336:	041a      	lsls	r2, r3, #16
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	43d9      	mvns	r1, r3
 800133c:	887b      	ldrh	r3, [r7, #2]
 800133e:	400b      	ands	r3, r1
 8001340:	431a      	orrs	r2, r3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	619a      	str	r2, [r3, #24]
}
 8001346:	bf00      	nop
 8001348:	3714      	adds	r7, #20
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
	...

08001354 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800135e:	4b08      	ldr	r3, [pc, #32]	; (8001380 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001360:	695a      	ldr	r2, [r3, #20]
 8001362:	88fb      	ldrh	r3, [r7, #6]
 8001364:	4013      	ands	r3, r2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d006      	beq.n	8001378 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800136a:	4a05      	ldr	r2, [pc, #20]	; (8001380 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800136c:	88fb      	ldrh	r3, [r7, #6]
 800136e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001370:	88fb      	ldrh	r3, [r7, #6]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff f960 	bl	8000638 <HAL_GPIO_EXTI_Callback>
  }
}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40013c00 	.word	0x40013c00

08001384 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d101      	bne.n	8001396 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e12b      	b.n	80015ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d106      	bne.n	80013b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff fb38 	bl	8000a20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2224      	movs	r2, #36	; 0x24
 80013b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f022 0201 	bic.w	r2, r2, #1
 80013c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013e8:	f001 fbec 	bl	8002bc4 <HAL_RCC_GetPCLK1Freq>
 80013ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	4a81      	ldr	r2, [pc, #516]	; (80015f8 <HAL_I2C_Init+0x274>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d807      	bhi.n	8001408 <HAL_I2C_Init+0x84>
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	4a80      	ldr	r2, [pc, #512]	; (80015fc <HAL_I2C_Init+0x278>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	bf94      	ite	ls
 8001400:	2301      	movls	r3, #1
 8001402:	2300      	movhi	r3, #0
 8001404:	b2db      	uxtb	r3, r3
 8001406:	e006      	b.n	8001416 <HAL_I2C_Init+0x92>
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4a7d      	ldr	r2, [pc, #500]	; (8001600 <HAL_I2C_Init+0x27c>)
 800140c:	4293      	cmp	r3, r2
 800140e:	bf94      	ite	ls
 8001410:	2301      	movls	r3, #1
 8001412:	2300      	movhi	r3, #0
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e0e7      	b.n	80015ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	4a78      	ldr	r2, [pc, #480]	; (8001604 <HAL_I2C_Init+0x280>)
 8001422:	fba2 2303 	umull	r2, r3, r2, r3
 8001426:	0c9b      	lsrs	r3, r3, #18
 8001428:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	68ba      	ldr	r2, [r7, #8]
 800143a:	430a      	orrs	r2, r1
 800143c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	6a1b      	ldr	r3, [r3, #32]
 8001444:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	4a6a      	ldr	r2, [pc, #424]	; (80015f8 <HAL_I2C_Init+0x274>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d802      	bhi.n	8001458 <HAL_I2C_Init+0xd4>
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	3301      	adds	r3, #1
 8001456:	e009      	b.n	800146c <HAL_I2C_Init+0xe8>
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800145e:	fb02 f303 	mul.w	r3, r2, r3
 8001462:	4a69      	ldr	r2, [pc, #420]	; (8001608 <HAL_I2C_Init+0x284>)
 8001464:	fba2 2303 	umull	r2, r3, r2, r3
 8001468:	099b      	lsrs	r3, r3, #6
 800146a:	3301      	adds	r3, #1
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	6812      	ldr	r2, [r2, #0]
 8001470:	430b      	orrs	r3, r1
 8001472:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800147e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	495c      	ldr	r1, [pc, #368]	; (80015f8 <HAL_I2C_Init+0x274>)
 8001488:	428b      	cmp	r3, r1
 800148a:	d819      	bhi.n	80014c0 <HAL_I2C_Init+0x13c>
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	1e59      	subs	r1, r3, #1
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	fbb1 f3f3 	udiv	r3, r1, r3
 800149a:	1c59      	adds	r1, r3, #1
 800149c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80014a0:	400b      	ands	r3, r1
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d00a      	beq.n	80014bc <HAL_I2C_Init+0x138>
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	1e59      	subs	r1, r3, #1
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80014b4:	3301      	adds	r3, #1
 80014b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014ba:	e051      	b.n	8001560 <HAL_I2C_Init+0x1dc>
 80014bc:	2304      	movs	r3, #4
 80014be:	e04f      	b.n	8001560 <HAL_I2C_Init+0x1dc>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d111      	bne.n	80014ec <HAL_I2C_Init+0x168>
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	1e58      	subs	r0, r3, #1
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6859      	ldr	r1, [r3, #4]
 80014d0:	460b      	mov	r3, r1
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	440b      	add	r3, r1
 80014d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80014da:	3301      	adds	r3, #1
 80014dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	bf0c      	ite	eq
 80014e4:	2301      	moveq	r3, #1
 80014e6:	2300      	movne	r3, #0
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	e012      	b.n	8001512 <HAL_I2C_Init+0x18e>
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	1e58      	subs	r0, r3, #1
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6859      	ldr	r1, [r3, #4]
 80014f4:	460b      	mov	r3, r1
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	440b      	add	r3, r1
 80014fa:	0099      	lsls	r1, r3, #2
 80014fc:	440b      	add	r3, r1
 80014fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001502:	3301      	adds	r3, #1
 8001504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001508:	2b00      	cmp	r3, #0
 800150a:	bf0c      	ite	eq
 800150c:	2301      	moveq	r3, #1
 800150e:	2300      	movne	r3, #0
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <HAL_I2C_Init+0x196>
 8001516:	2301      	movs	r3, #1
 8001518:	e022      	b.n	8001560 <HAL_I2C_Init+0x1dc>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10e      	bne.n	8001540 <HAL_I2C_Init+0x1bc>
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	1e58      	subs	r0, r3, #1
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6859      	ldr	r1, [r3, #4]
 800152a:	460b      	mov	r3, r1
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	440b      	add	r3, r1
 8001530:	fbb0 f3f3 	udiv	r3, r0, r3
 8001534:	3301      	adds	r3, #1
 8001536:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800153a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800153e:	e00f      	b.n	8001560 <HAL_I2C_Init+0x1dc>
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	1e58      	subs	r0, r3, #1
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6859      	ldr	r1, [r3, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	440b      	add	r3, r1
 800154e:	0099      	lsls	r1, r3, #2
 8001550:	440b      	add	r3, r1
 8001552:	fbb0 f3f3 	udiv	r3, r0, r3
 8001556:	3301      	adds	r3, #1
 8001558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800155c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	6809      	ldr	r1, [r1, #0]
 8001564:	4313      	orrs	r3, r2
 8001566:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	69da      	ldr	r2, [r3, #28]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a1b      	ldr	r3, [r3, #32]
 800157a:	431a      	orrs	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	430a      	orrs	r2, r1
 8001582:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800158e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	6911      	ldr	r1, [r2, #16]
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	68d2      	ldr	r2, [r2, #12]
 800159a:	4311      	orrs	r1, r2
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	6812      	ldr	r2, [r2, #0]
 80015a0:	430b      	orrs	r3, r1
 80015a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	695a      	ldr	r2, [r3, #20]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	431a      	orrs	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	430a      	orrs	r2, r1
 80015be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681a      	ldr	r2, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f042 0201 	orr.w	r2, r2, #1
 80015ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2220      	movs	r2, #32
 80015da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	000186a0 	.word	0x000186a0
 80015fc:	001e847f 	.word	0x001e847f
 8001600:	003d08ff 	.word	0x003d08ff
 8001604:	431bde83 	.word	0x431bde83
 8001608:	10624dd3 	.word	0x10624dd3

0800160c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b088      	sub	sp, #32
 8001610:	af02      	add	r7, sp, #8
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	607a      	str	r2, [r7, #4]
 8001616:	461a      	mov	r2, r3
 8001618:	460b      	mov	r3, r1
 800161a:	817b      	strh	r3, [r7, #10]
 800161c:	4613      	mov	r3, r2
 800161e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001620:	f7ff fb9e 	bl	8000d60 <HAL_GetTick>
 8001624:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b20      	cmp	r3, #32
 8001630:	f040 80e0 	bne.w	80017f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	2319      	movs	r3, #25
 800163a:	2201      	movs	r2, #1
 800163c:	4970      	ldr	r1, [pc, #448]	; (8001800 <HAL_I2C_Master_Transmit+0x1f4>)
 800163e:	68f8      	ldr	r0, [r7, #12]
 8001640:	f000 fc72 	bl	8001f28 <I2C_WaitOnFlagUntilTimeout>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800164a:	2302      	movs	r3, #2
 800164c:	e0d3      	b.n	80017f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001654:	2b01      	cmp	r3, #1
 8001656:	d101      	bne.n	800165c <HAL_I2C_Master_Transmit+0x50>
 8001658:	2302      	movs	r3, #2
 800165a:	e0cc      	b.n	80017f6 <HAL_I2C_Master_Transmit+0x1ea>
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2201      	movs	r2, #1
 8001660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	2b01      	cmp	r3, #1
 8001670:	d007      	beq.n	8001682 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f042 0201 	orr.w	r2, r2, #1
 8001680:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001690:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2221      	movs	r2, #33	; 0x21
 8001696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2210      	movs	r2, #16
 800169e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2200      	movs	r2, #0
 80016a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	893a      	ldrh	r2, [r7, #8]
 80016b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4a50      	ldr	r2, [pc, #320]	; (8001804 <HAL_I2C_Master_Transmit+0x1f8>)
 80016c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80016c4:	8979      	ldrh	r1, [r7, #10]
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	6a3a      	ldr	r2, [r7, #32]
 80016ca:	68f8      	ldr	r0, [r7, #12]
 80016cc:	f000 fac2 	bl	8001c54 <I2C_MasterRequestWrite>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e08d      	b.n	80017f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	695b      	ldr	r3, [r3, #20]
 80016e4:	613b      	str	r3, [r7, #16]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	613b      	str	r3, [r7, #16]
 80016ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80016f0:	e066      	b.n	80017c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	6a39      	ldr	r1, [r7, #32]
 80016f6:	68f8      	ldr	r0, [r7, #12]
 80016f8:	f000 fcec 	bl	80020d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d00d      	beq.n	800171e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	2b04      	cmp	r3, #4
 8001708:	d107      	bne.n	800171a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001718:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e06b      	b.n	80017f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001722:	781a      	ldrb	r2, [r3, #0]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172e:	1c5a      	adds	r2, r3, #1
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001738:	b29b      	uxth	r3, r3
 800173a:	3b01      	subs	r3, #1
 800173c:	b29a      	uxth	r2, r3
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001746:	3b01      	subs	r3, #1
 8001748:	b29a      	uxth	r2, r3
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	695b      	ldr	r3, [r3, #20]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	2b04      	cmp	r3, #4
 800175a:	d11b      	bne.n	8001794 <HAL_I2C_Master_Transmit+0x188>
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001760:	2b00      	cmp	r3, #0
 8001762:	d017      	beq.n	8001794 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001768:	781a      	ldrb	r2, [r3, #0]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001774:	1c5a      	adds	r2, r3, #1
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800177e:	b29b      	uxth	r3, r3
 8001780:	3b01      	subs	r3, #1
 8001782:	b29a      	uxth	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800178c:	3b01      	subs	r3, #1
 800178e:	b29a      	uxth	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001794:	697a      	ldr	r2, [r7, #20]
 8001796:	6a39      	ldr	r1, [r7, #32]
 8001798:	68f8      	ldr	r0, [r7, #12]
 800179a:	f000 fcdc 	bl	8002156 <I2C_WaitOnBTFFlagUntilTimeout>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d00d      	beq.n	80017c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a8:	2b04      	cmp	r3, #4
 80017aa:	d107      	bne.n	80017bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e01a      	b.n	80017f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d194      	bne.n	80016f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2220      	movs	r2, #32
 80017dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80017f0:	2300      	movs	r3, #0
 80017f2:	e000      	b.n	80017f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80017f4:	2302      	movs	r3, #2
  }
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3718      	adds	r7, #24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	00100002 	.word	0x00100002
 8001804:	ffff0000 	.word	0xffff0000

08001808 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08c      	sub	sp, #48	; 0x30
 800180c:	af02      	add	r7, sp, #8
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	4608      	mov	r0, r1
 8001812:	4611      	mov	r1, r2
 8001814:	461a      	mov	r2, r3
 8001816:	4603      	mov	r3, r0
 8001818:	817b      	strh	r3, [r7, #10]
 800181a:	460b      	mov	r3, r1
 800181c:	813b      	strh	r3, [r7, #8]
 800181e:	4613      	mov	r3, r2
 8001820:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001822:	f7ff fa9d 	bl	8000d60 <HAL_GetTick>
 8001826:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800182e:	b2db      	uxtb	r3, r3
 8001830:	2b20      	cmp	r3, #32
 8001832:	f040 8208 	bne.w	8001c46 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	2319      	movs	r3, #25
 800183c:	2201      	movs	r2, #1
 800183e:	497b      	ldr	r1, [pc, #492]	; (8001a2c <HAL_I2C_Mem_Read+0x224>)
 8001840:	68f8      	ldr	r0, [r7, #12]
 8001842:	f000 fb71 	bl	8001f28 <I2C_WaitOnFlagUntilTimeout>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800184c:	2302      	movs	r3, #2
 800184e:	e1fb      	b.n	8001c48 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001856:	2b01      	cmp	r3, #1
 8001858:	d101      	bne.n	800185e <HAL_I2C_Mem_Read+0x56>
 800185a:	2302      	movs	r3, #2
 800185c:	e1f4      	b.n	8001c48 <HAL_I2C_Mem_Read+0x440>
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2201      	movs	r2, #1
 8001862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	2b01      	cmp	r3, #1
 8001872:	d007      	beq.n	8001884 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f042 0201 	orr.w	r2, r2, #1
 8001882:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001892:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2222      	movs	r2, #34	; 0x22
 8001898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2240      	movs	r2, #64	; 0x40
 80018a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2200      	movs	r2, #0
 80018a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80018b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	4a5b      	ldr	r2, [pc, #364]	; (8001a30 <HAL_I2C_Mem_Read+0x228>)
 80018c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80018c6:	88f8      	ldrh	r0, [r7, #6]
 80018c8:	893a      	ldrh	r2, [r7, #8]
 80018ca:	8979      	ldrh	r1, [r7, #10]
 80018cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ce:	9301      	str	r3, [sp, #4]
 80018d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	4603      	mov	r3, r0
 80018d6:	68f8      	ldr	r0, [r7, #12]
 80018d8:	f000 fa3e 	bl	8001d58 <I2C_RequestMemoryRead>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e1b0      	b.n	8001c48 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d113      	bne.n	8001916 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018ee:	2300      	movs	r3, #0
 80018f0:	623b      	str	r3, [r7, #32]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	695b      	ldr	r3, [r3, #20]
 80018f8:	623b      	str	r3, [r7, #32]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	623b      	str	r3, [r7, #32]
 8001902:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	e184      	b.n	8001c20 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800191a:	2b01      	cmp	r3, #1
 800191c:	d11b      	bne.n	8001956 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800192c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	695b      	ldr	r3, [r3, #20]
 8001938:	61fb      	str	r3, [r7, #28]
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	61fb      	str	r3, [r7, #28]
 8001942:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	e164      	b.n	8001c20 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800195a:	2b02      	cmp	r3, #2
 800195c:	d11b      	bne.n	8001996 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800196c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800197c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800197e:	2300      	movs	r3, #0
 8001980:	61bb      	str	r3, [r7, #24]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	695b      	ldr	r3, [r3, #20]
 8001988:	61bb      	str	r3, [r7, #24]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	61bb      	str	r3, [r7, #24]
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	e144      	b.n	8001c20 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001996:	2300      	movs	r3, #0
 8001998:	617b      	str	r3, [r7, #20]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	695b      	ldr	r3, [r3, #20]
 80019a0:	617b      	str	r3, [r7, #20]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	617b      	str	r3, [r7, #20]
 80019aa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80019ac:	e138      	b.n	8001c20 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b2:	2b03      	cmp	r3, #3
 80019b4:	f200 80f1 	bhi.w	8001b9a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d123      	bne.n	8001a08 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80019c4:	68f8      	ldr	r0, [r7, #12]
 80019c6:	f000 fc07 	bl	80021d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e139      	b.n	8001c48 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	691a      	ldr	r2, [r3, #16]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e6:	1c5a      	adds	r2, r3, #1
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f0:	3b01      	subs	r3, #1
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	3b01      	subs	r3, #1
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a06:	e10b      	b.n	8001c20 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d14e      	bne.n	8001aae <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a16:	2200      	movs	r2, #0
 8001a18:	4906      	ldr	r1, [pc, #24]	; (8001a34 <HAL_I2C_Mem_Read+0x22c>)
 8001a1a:	68f8      	ldr	r0, [r7, #12]
 8001a1c:	f000 fa84 	bl	8001f28 <I2C_WaitOnFlagUntilTimeout>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d008      	beq.n	8001a38 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e10e      	b.n	8001c48 <HAL_I2C_Mem_Read+0x440>
 8001a2a:	bf00      	nop
 8001a2c:	00100002 	.word	0x00100002
 8001a30:	ffff0000 	.word	0xffff0000
 8001a34:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	691a      	ldr	r2, [r3, #16]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5a:	1c5a      	adds	r2, r3, #1
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a64:	3b01      	subs	r3, #1
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	3b01      	subs	r3, #1
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	691a      	ldr	r2, [r3, #16]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a84:	b2d2      	uxtb	r2, r2
 8001a86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8c:	1c5a      	adds	r2, r3, #1
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a96:	3b01      	subs	r3, #1
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001aac:	e0b8      	b.n	8001c20 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	4966      	ldr	r1, [pc, #408]	; (8001c50 <HAL_I2C_Mem_Read+0x448>)
 8001ab8:	68f8      	ldr	r0, [r7, #12]
 8001aba:	f000 fa35 	bl	8001f28 <I2C_WaitOnFlagUntilTimeout>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e0bf      	b.n	8001c48 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ad6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	691a      	ldr	r2, [r3, #16]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aea:	1c5a      	adds	r2, r3, #1
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af4:	3b01      	subs	r3, #1
 8001af6:	b29a      	uxth	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	3b01      	subs	r3, #1
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b10:	2200      	movs	r2, #0
 8001b12:	494f      	ldr	r1, [pc, #316]	; (8001c50 <HAL_I2C_Mem_Read+0x448>)
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f000 fa07 	bl	8001f28 <I2C_WaitOnFlagUntilTimeout>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e091      	b.n	8001c48 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	691a      	ldr	r2, [r3, #16]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b46:	1c5a      	adds	r2, r3, #1
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b50:	3b01      	subs	r3, #1
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	691a      	ldr	r2, [r3, #16]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b70:	b2d2      	uxtb	r2, r2
 8001b72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b78:	1c5a      	adds	r2, r3, #1
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b82:	3b01      	subs	r3, #1
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	3b01      	subs	r3, #1
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b98:	e042      	b.n	8001c20 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f000 fb1a 	bl	80021d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e04c      	b.n	8001c48 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	691a      	ldr	r2, [r3, #16]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc0:	1c5a      	adds	r2, r3, #1
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	f003 0304 	and.w	r3, r3, #4
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	d118      	bne.n	8001c20 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	691a      	ldr	r2, [r3, #16]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf8:	b2d2      	uxtb	r2, r2
 8001bfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c00:	1c5a      	adds	r2, r3, #1
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f47f aec2 	bne.w	80019ae <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2220      	movs	r2, #32
 8001c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c42:	2300      	movs	r3, #0
 8001c44:	e000      	b.n	8001c48 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001c46:	2302      	movs	r3, #2
  }
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3728      	adds	r7, #40	; 0x28
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	00010004 	.word	0x00010004

08001c54 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b088      	sub	sp, #32
 8001c58:	af02      	add	r7, sp, #8
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	607a      	str	r2, [r7, #4]
 8001c5e:	603b      	str	r3, [r7, #0]
 8001c60:	460b      	mov	r3, r1
 8001c62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c68:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	d006      	beq.n	8001c7e <I2C_MasterRequestWrite+0x2a>
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d003      	beq.n	8001c7e <I2C_MasterRequestWrite+0x2a>
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c7c:	d108      	bne.n	8001c90 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	e00b      	b.n	8001ca8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c94:	2b12      	cmp	r3, #18
 8001c96:	d107      	bne.n	8001ca8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ca6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f000 f937 	bl	8001f28 <I2C_WaitOnFlagUntilTimeout>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00d      	beq.n	8001cdc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cce:	d103      	bne.n	8001cd8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cd6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e035      	b.n	8001d48 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ce4:	d108      	bne.n	8001cf8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ce6:	897b      	ldrh	r3, [r7, #10]
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	461a      	mov	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001cf4:	611a      	str	r2, [r3, #16]
 8001cf6:	e01b      	b.n	8001d30 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001cf8:	897b      	ldrh	r3, [r7, #10]
 8001cfa:	11db      	asrs	r3, r3, #7
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	f003 0306 	and.w	r3, r3, #6
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	f063 030f 	orn	r3, r3, #15
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	490e      	ldr	r1, [pc, #56]	; (8001d50 <I2C_MasterRequestWrite+0xfc>)
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f000 f95d 	bl	8001fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e010      	b.n	8001d48 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d26:	897b      	ldrh	r3, [r7, #10]
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	4907      	ldr	r1, [pc, #28]	; (8001d54 <I2C_MasterRequestWrite+0x100>)
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f000 f94d 	bl	8001fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e000      	b.n	8001d48 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3718      	adds	r7, #24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	00010008 	.word	0x00010008
 8001d54:	00010002 	.word	0x00010002

08001d58 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b088      	sub	sp, #32
 8001d5c:	af02      	add	r7, sp, #8
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	4608      	mov	r0, r1
 8001d62:	4611      	mov	r1, r2
 8001d64:	461a      	mov	r2, r3
 8001d66:	4603      	mov	r3, r0
 8001d68:	817b      	strh	r3, [r7, #10]
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	813b      	strh	r3, [r7, #8]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d80:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	6a3b      	ldr	r3, [r7, #32]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f000 f8c2 	bl	8001f28 <I2C_WaitOnFlagUntilTimeout>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00d      	beq.n	8001dc6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001db8:	d103      	bne.n	8001dc2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dc0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e0aa      	b.n	8001f1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001dc6:	897b      	ldrh	r3, [r7, #10]
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	461a      	mov	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001dd4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	6a3a      	ldr	r2, [r7, #32]
 8001dda:	4952      	ldr	r1, [pc, #328]	; (8001f24 <I2C_RequestMemoryRead+0x1cc>)
 8001ddc:	68f8      	ldr	r0, [r7, #12]
 8001dde:	f000 f8fa 	bl	8001fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e097      	b.n	8001f1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	617b      	str	r3, [r7, #20]
 8001e00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e04:	6a39      	ldr	r1, [r7, #32]
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	f000 f964 	bl	80020d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00d      	beq.n	8001e2e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d107      	bne.n	8001e2a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e076      	b.n	8001f1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e2e:	88fb      	ldrh	r3, [r7, #6]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d105      	bne.n	8001e40 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e34:	893b      	ldrh	r3, [r7, #8]
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	611a      	str	r2, [r3, #16]
 8001e3e:	e021      	b.n	8001e84 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001e40:	893b      	ldrh	r3, [r7, #8]
 8001e42:	0a1b      	lsrs	r3, r3, #8
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e50:	6a39      	ldr	r1, [r7, #32]
 8001e52:	68f8      	ldr	r0, [r7, #12]
 8001e54:	f000 f93e 	bl	80020d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00d      	beq.n	8001e7a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	2b04      	cmp	r3, #4
 8001e64:	d107      	bne.n	8001e76 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e050      	b.n	8001f1c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e7a:	893b      	ldrh	r3, [r7, #8]
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e86:	6a39      	ldr	r1, [r7, #32]
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f000 f923 	bl	80020d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00d      	beq.n	8001eb0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	2b04      	cmp	r3, #4
 8001e9a:	d107      	bne.n	8001eac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eaa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e035      	b.n	8001f1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ebe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	6a3b      	ldr	r3, [r7, #32]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f000 f82b 	bl	8001f28 <I2C_WaitOnFlagUntilTimeout>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d00d      	beq.n	8001ef4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ee6:	d103      	bne.n	8001ef0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001eee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e013      	b.n	8001f1c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001ef4:	897b      	ldrh	r3, [r7, #10]
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f06:	6a3a      	ldr	r2, [r7, #32]
 8001f08:	4906      	ldr	r1, [pc, #24]	; (8001f24 <I2C_RequestMemoryRead+0x1cc>)
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	f000 f863 	bl	8001fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e000      	b.n	8001f1c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001f1a:	2300      	movs	r3, #0
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3718      	adds	r7, #24
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	00010002 	.word	0x00010002

08001f28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	603b      	str	r3, [r7, #0]
 8001f34:	4613      	mov	r3, r2
 8001f36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f38:	e025      	b.n	8001f86 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f40:	d021      	beq.n	8001f86 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f42:	f7fe ff0d 	bl	8000d60 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d302      	bcc.n	8001f58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d116      	bne.n	8001f86 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2220      	movs	r2, #32
 8001f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	f043 0220 	orr.w	r2, r3, #32
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e023      	b.n	8001fce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	0c1b      	lsrs	r3, r3, #16
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d10d      	bne.n	8001fac <I2C_WaitOnFlagUntilTimeout+0x84>
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	43da      	mvns	r2, r3
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	bf0c      	ite	eq
 8001fa2:	2301      	moveq	r3, #1
 8001fa4:	2300      	movne	r3, #0
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	461a      	mov	r2, r3
 8001faa:	e00c      	b.n	8001fc6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	43da      	mvns	r2, r3
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	bf0c      	ite	eq
 8001fbe:	2301      	moveq	r3, #1
 8001fc0:	2300      	movne	r3, #0
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d0b6      	beq.n	8001f3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3710      	adds	r7, #16
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b084      	sub	sp, #16
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	60f8      	str	r0, [r7, #12]
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	607a      	str	r2, [r7, #4]
 8001fe2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fe4:	e051      	b.n	800208a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ff4:	d123      	bne.n	800203e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002004:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800200e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2200      	movs	r2, #0
 8002014:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2220      	movs	r2, #32
 800201a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	f043 0204 	orr.w	r2, r3, #4
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e046      	b.n	80020cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002044:	d021      	beq.n	800208a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002046:	f7fe fe8b 	bl	8000d60 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	429a      	cmp	r2, r3
 8002054:	d302      	bcc.n	800205c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d116      	bne.n	800208a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2200      	movs	r2, #0
 8002060:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2220      	movs	r2, #32
 8002066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	f043 0220 	orr.w	r2, r3, #32
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e020      	b.n	80020cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	0c1b      	lsrs	r3, r3, #16
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b01      	cmp	r3, #1
 8002092:	d10c      	bne.n	80020ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	43da      	mvns	r2, r3
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	4013      	ands	r3, r2
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	bf14      	ite	ne
 80020a6:	2301      	movne	r3, #1
 80020a8:	2300      	moveq	r3, #0
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	e00b      	b.n	80020c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	43da      	mvns	r2, r3
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	4013      	ands	r3, r2
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	2b00      	cmp	r3, #0
 80020be:	bf14      	ite	ne
 80020c0:	2301      	movne	r3, #1
 80020c2:	2300      	moveq	r3, #0
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d18d      	bne.n	8001fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020e0:	e02d      	b.n	800213e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f000 f8ce 	bl	8002284 <I2C_IsAcknowledgeFailed>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e02d      	b.n	800214e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020f8:	d021      	beq.n	800213e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020fa:	f7fe fe31 	bl	8000d60 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	68ba      	ldr	r2, [r7, #8]
 8002106:	429a      	cmp	r2, r3
 8002108:	d302      	bcc.n	8002110 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d116      	bne.n	800213e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2220      	movs	r2, #32
 800211a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	f043 0220 	orr.w	r2, r3, #32
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e007      	b.n	800214e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002148:	2b80      	cmp	r3, #128	; 0x80
 800214a:	d1ca      	bne.n	80020e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b084      	sub	sp, #16
 800215a:	af00      	add	r7, sp, #0
 800215c:	60f8      	str	r0, [r7, #12]
 800215e:	60b9      	str	r1, [r7, #8]
 8002160:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002162:	e02d      	b.n	80021c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002164:	68f8      	ldr	r0, [r7, #12]
 8002166:	f000 f88d 	bl	8002284 <I2C_IsAcknowledgeFailed>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e02d      	b.n	80021d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800217a:	d021      	beq.n	80021c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800217c:	f7fe fdf0 	bl	8000d60 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	429a      	cmp	r2, r3
 800218a:	d302      	bcc.n	8002192 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d116      	bne.n	80021c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2200      	movs	r2, #0
 8002196:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2220      	movs	r2, #32
 800219c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ac:	f043 0220 	orr.w	r2, r3, #32
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e007      	b.n	80021d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	f003 0304 	and.w	r3, r3, #4
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	d1ca      	bne.n	8002164 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021e4:	e042      	b.n	800226c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	695b      	ldr	r3, [r3, #20]
 80021ec:	f003 0310 	and.w	r3, r3, #16
 80021f0:	2b10      	cmp	r3, #16
 80021f2:	d119      	bne.n	8002228 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f06f 0210 	mvn.w	r2, #16
 80021fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2220      	movs	r2, #32
 8002208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e029      	b.n	800227c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002228:	f7fe fd9a 	bl	8000d60 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	429a      	cmp	r2, r3
 8002236:	d302      	bcc.n	800223e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d116      	bne.n	800226c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2220      	movs	r2, #32
 8002248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002258:	f043 0220 	orr.w	r2, r3, #32
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e007      	b.n	800227c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002276:	2b40      	cmp	r3, #64	; 0x40
 8002278:	d1b5      	bne.n	80021e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}

08002284 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800229a:	d11b      	bne.n	80022d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2220      	movs	r2, #32
 80022b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c0:	f043 0204 	orr.w	r2, r3, #4
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e000      	b.n	80022d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
	...

080022e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e267      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d075      	beq.n	80023ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002302:	4b88      	ldr	r3, [pc, #544]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 030c 	and.w	r3, r3, #12
 800230a:	2b04      	cmp	r3, #4
 800230c:	d00c      	beq.n	8002328 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800230e:	4b85      	ldr	r3, [pc, #532]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002316:	2b08      	cmp	r3, #8
 8002318:	d112      	bne.n	8002340 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800231a:	4b82      	ldr	r3, [pc, #520]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002322:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002326:	d10b      	bne.n	8002340 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002328:	4b7e      	ldr	r3, [pc, #504]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d05b      	beq.n	80023ec <HAL_RCC_OscConfig+0x108>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d157      	bne.n	80023ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e242      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002348:	d106      	bne.n	8002358 <HAL_RCC_OscConfig+0x74>
 800234a:	4b76      	ldr	r3, [pc, #472]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a75      	ldr	r2, [pc, #468]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	e01d      	b.n	8002394 <HAL_RCC_OscConfig+0xb0>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002360:	d10c      	bne.n	800237c <HAL_RCC_OscConfig+0x98>
 8002362:	4b70      	ldr	r3, [pc, #448]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a6f      	ldr	r2, [pc, #444]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002368:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	4b6d      	ldr	r3, [pc, #436]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a6c      	ldr	r2, [pc, #432]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	e00b      	b.n	8002394 <HAL_RCC_OscConfig+0xb0>
 800237c:	4b69      	ldr	r3, [pc, #420]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a68      	ldr	r2, [pc, #416]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002386:	6013      	str	r3, [r2, #0]
 8002388:	4b66      	ldr	r3, [pc, #408]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a65      	ldr	r2, [pc, #404]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 800238e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002392:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d013      	beq.n	80023c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239c:	f7fe fce0 	bl	8000d60 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023a4:	f7fe fcdc 	bl	8000d60 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b64      	cmp	r3, #100	; 0x64
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e207      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b6:	4b5b      	ldr	r3, [pc, #364]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d0f0      	beq.n	80023a4 <HAL_RCC_OscConfig+0xc0>
 80023c2:	e014      	b.n	80023ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c4:	f7fe fccc 	bl	8000d60 <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023cc:	f7fe fcc8 	bl	8000d60 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b64      	cmp	r3, #100	; 0x64
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e1f3      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023de:	4b51      	ldr	r3, [pc, #324]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1f0      	bne.n	80023cc <HAL_RCC_OscConfig+0xe8>
 80023ea:	e000      	b.n	80023ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d063      	beq.n	80024c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023fa:	4b4a      	ldr	r3, [pc, #296]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 030c 	and.w	r3, r3, #12
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00b      	beq.n	800241e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002406:	4b47      	ldr	r3, [pc, #284]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800240e:	2b08      	cmp	r3, #8
 8002410:	d11c      	bne.n	800244c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002412:	4b44      	ldr	r3, [pc, #272]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d116      	bne.n	800244c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800241e:	4b41      	ldr	r3, [pc, #260]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d005      	beq.n	8002436 <HAL_RCC_OscConfig+0x152>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d001      	beq.n	8002436 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e1c7      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002436:	4b3b      	ldr	r3, [pc, #236]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4937      	ldr	r1, [pc, #220]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002446:	4313      	orrs	r3, r2
 8002448:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800244a:	e03a      	b.n	80024c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d020      	beq.n	8002496 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002454:	4b34      	ldr	r3, [pc, #208]	; (8002528 <HAL_RCC_OscConfig+0x244>)
 8002456:	2201      	movs	r2, #1
 8002458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245a:	f7fe fc81 	bl	8000d60 <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002462:	f7fe fc7d 	bl	8000d60 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e1a8      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002474:	4b2b      	ldr	r3, [pc, #172]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0f0      	beq.n	8002462 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002480:	4b28      	ldr	r3, [pc, #160]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	4925      	ldr	r1, [pc, #148]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 8002490:	4313      	orrs	r3, r2
 8002492:	600b      	str	r3, [r1, #0]
 8002494:	e015      	b.n	80024c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002496:	4b24      	ldr	r3, [pc, #144]	; (8002528 <HAL_RCC_OscConfig+0x244>)
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249c:	f7fe fc60 	bl	8000d60 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024a4:	f7fe fc5c 	bl	8000d60 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e187      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024b6:	4b1b      	ldr	r3, [pc, #108]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f0      	bne.n	80024a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0308 	and.w	r3, r3, #8
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d036      	beq.n	800253c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d016      	beq.n	8002504 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024d6:	4b15      	ldr	r3, [pc, #84]	; (800252c <HAL_RCC_OscConfig+0x248>)
 80024d8:	2201      	movs	r2, #1
 80024da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024dc:	f7fe fc40 	bl	8000d60 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024e4:	f7fe fc3c 	bl	8000d60 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e167      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f6:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <HAL_RCC_OscConfig+0x240>)
 80024f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d0f0      	beq.n	80024e4 <HAL_RCC_OscConfig+0x200>
 8002502:	e01b      	b.n	800253c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002504:	4b09      	ldr	r3, [pc, #36]	; (800252c <HAL_RCC_OscConfig+0x248>)
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800250a:	f7fe fc29 	bl	8000d60 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002510:	e00e      	b.n	8002530 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002512:	f7fe fc25 	bl	8000d60 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d907      	bls.n	8002530 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e150      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
 8002524:	40023800 	.word	0x40023800
 8002528:	42470000 	.word	0x42470000
 800252c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002530:	4b88      	ldr	r3, [pc, #544]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 8002532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1ea      	bne.n	8002512 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0304 	and.w	r3, r3, #4
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 8097 	beq.w	8002678 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800254a:	2300      	movs	r3, #0
 800254c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800254e:	4b81      	ldr	r3, [pc, #516]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10f      	bne.n	800257a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800255a:	2300      	movs	r3, #0
 800255c:	60bb      	str	r3, [r7, #8]
 800255e:	4b7d      	ldr	r3, [pc, #500]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	4a7c      	ldr	r2, [pc, #496]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 8002564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002568:	6413      	str	r3, [r2, #64]	; 0x40
 800256a:	4b7a      	ldr	r3, [pc, #488]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002572:	60bb      	str	r3, [r7, #8]
 8002574:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002576:	2301      	movs	r3, #1
 8002578:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800257a:	4b77      	ldr	r3, [pc, #476]	; (8002758 <HAL_RCC_OscConfig+0x474>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002582:	2b00      	cmp	r3, #0
 8002584:	d118      	bne.n	80025b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002586:	4b74      	ldr	r3, [pc, #464]	; (8002758 <HAL_RCC_OscConfig+0x474>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a73      	ldr	r2, [pc, #460]	; (8002758 <HAL_RCC_OscConfig+0x474>)
 800258c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002592:	f7fe fbe5 	bl	8000d60 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800259a:	f7fe fbe1 	bl	8000d60 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e10c      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ac:	4b6a      	ldr	r3, [pc, #424]	; (8002758 <HAL_RCC_OscConfig+0x474>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0f0      	beq.n	800259a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d106      	bne.n	80025ce <HAL_RCC_OscConfig+0x2ea>
 80025c0:	4b64      	ldr	r3, [pc, #400]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 80025c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c4:	4a63      	ldr	r2, [pc, #396]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 80025c6:	f043 0301 	orr.w	r3, r3, #1
 80025ca:	6713      	str	r3, [r2, #112]	; 0x70
 80025cc:	e01c      	b.n	8002608 <HAL_RCC_OscConfig+0x324>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	2b05      	cmp	r3, #5
 80025d4:	d10c      	bne.n	80025f0 <HAL_RCC_OscConfig+0x30c>
 80025d6:	4b5f      	ldr	r3, [pc, #380]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 80025d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025da:	4a5e      	ldr	r2, [pc, #376]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 80025dc:	f043 0304 	orr.w	r3, r3, #4
 80025e0:	6713      	str	r3, [r2, #112]	; 0x70
 80025e2:	4b5c      	ldr	r3, [pc, #368]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 80025e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e6:	4a5b      	ldr	r2, [pc, #364]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	6713      	str	r3, [r2, #112]	; 0x70
 80025ee:	e00b      	b.n	8002608 <HAL_RCC_OscConfig+0x324>
 80025f0:	4b58      	ldr	r3, [pc, #352]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 80025f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f4:	4a57      	ldr	r2, [pc, #348]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 80025f6:	f023 0301 	bic.w	r3, r3, #1
 80025fa:	6713      	str	r3, [r2, #112]	; 0x70
 80025fc:	4b55      	ldr	r3, [pc, #340]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 80025fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002600:	4a54      	ldr	r2, [pc, #336]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 8002602:	f023 0304 	bic.w	r3, r3, #4
 8002606:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d015      	beq.n	800263c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002610:	f7fe fba6 	bl	8000d60 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002616:	e00a      	b.n	800262e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002618:	f7fe fba2 	bl	8000d60 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	f241 3288 	movw	r2, #5000	; 0x1388
 8002626:	4293      	cmp	r3, r2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e0cb      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800262e:	4b49      	ldr	r3, [pc, #292]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 8002630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0ee      	beq.n	8002618 <HAL_RCC_OscConfig+0x334>
 800263a:	e014      	b.n	8002666 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800263c:	f7fe fb90 	bl	8000d60 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002642:	e00a      	b.n	800265a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002644:	f7fe fb8c 	bl	8000d60 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002652:	4293      	cmp	r3, r2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e0b5      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800265a:	4b3e      	ldr	r3, [pc, #248]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 800265c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1ee      	bne.n	8002644 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002666:	7dfb      	ldrb	r3, [r7, #23]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d105      	bne.n	8002678 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800266c:	4b39      	ldr	r3, [pc, #228]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 800266e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002670:	4a38      	ldr	r2, [pc, #224]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 8002672:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002676:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 80a1 	beq.w	80027c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002682:	4b34      	ldr	r3, [pc, #208]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f003 030c 	and.w	r3, r3, #12
 800268a:	2b08      	cmp	r3, #8
 800268c:	d05c      	beq.n	8002748 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	2b02      	cmp	r3, #2
 8002694:	d141      	bne.n	800271a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002696:	4b31      	ldr	r3, [pc, #196]	; (800275c <HAL_RCC_OscConfig+0x478>)
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269c:	f7fe fb60 	bl	8000d60 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026a4:	f7fe fb5c 	bl	8000d60 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e087      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b6:	4b27      	ldr	r3, [pc, #156]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1f0      	bne.n	80026a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69da      	ldr	r2, [r3, #28]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	431a      	orrs	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	019b      	lsls	r3, r3, #6
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d8:	085b      	lsrs	r3, r3, #1
 80026da:	3b01      	subs	r3, #1
 80026dc:	041b      	lsls	r3, r3, #16
 80026de:	431a      	orrs	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e4:	061b      	lsls	r3, r3, #24
 80026e6:	491b      	ldr	r1, [pc, #108]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026ec:	4b1b      	ldr	r3, [pc, #108]	; (800275c <HAL_RCC_OscConfig+0x478>)
 80026ee:	2201      	movs	r2, #1
 80026f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f2:	f7fe fb35 	bl	8000d60 <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026f8:	e008      	b.n	800270c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fa:	f7fe fb31 	bl	8000d60 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e05c      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800270c:	4b11      	ldr	r3, [pc, #68]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d0f0      	beq.n	80026fa <HAL_RCC_OscConfig+0x416>
 8002718:	e054      	b.n	80027c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800271a:	4b10      	ldr	r3, [pc, #64]	; (800275c <HAL_RCC_OscConfig+0x478>)
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002720:	f7fe fb1e 	bl	8000d60 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002728:	f7fe fb1a 	bl	8000d60 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e045      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800273a:	4b06      	ldr	r3, [pc, #24]	; (8002754 <HAL_RCC_OscConfig+0x470>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1f0      	bne.n	8002728 <HAL_RCC_OscConfig+0x444>
 8002746:	e03d      	b.n	80027c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d107      	bne.n	8002760 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e038      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
 8002754:	40023800 	.word	0x40023800
 8002758:	40007000 	.word	0x40007000
 800275c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002760:	4b1b      	ldr	r3, [pc, #108]	; (80027d0 <HAL_RCC_OscConfig+0x4ec>)
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d028      	beq.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002778:	429a      	cmp	r2, r3
 800277a:	d121      	bne.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002786:	429a      	cmp	r2, r3
 8002788:	d11a      	bne.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002790:	4013      	ands	r3, r2
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002796:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002798:	4293      	cmp	r3, r2
 800279a:	d111      	bne.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a6:	085b      	lsrs	r3, r3, #1
 80027a8:	3b01      	subs	r3, #1
 80027aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d107      	bne.n	80027c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027bc:	429a      	cmp	r2, r3
 80027be:	d001      	beq.n	80027c4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e000      	b.n	80027c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40023800 	.word	0x40023800

080027d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e0cc      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027e8:	4b68      	ldr	r3, [pc, #416]	; (800298c <HAL_RCC_ClockConfig+0x1b8>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d90c      	bls.n	8002810 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f6:	4b65      	ldr	r3, [pc, #404]	; (800298c <HAL_RCC_ClockConfig+0x1b8>)
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fe:	4b63      	ldr	r3, [pc, #396]	; (800298c <HAL_RCC_ClockConfig+0x1b8>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0307 	and.w	r3, r3, #7
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	429a      	cmp	r2, r3
 800280a:	d001      	beq.n	8002810 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e0b8      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d020      	beq.n	800285e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0304 	and.w	r3, r3, #4
 8002824:	2b00      	cmp	r3, #0
 8002826:	d005      	beq.n	8002834 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002828:	4b59      	ldr	r3, [pc, #356]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	4a58      	ldr	r2, [pc, #352]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 800282e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002832:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0308 	and.w	r3, r3, #8
 800283c:	2b00      	cmp	r3, #0
 800283e:	d005      	beq.n	800284c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002840:	4b53      	ldr	r3, [pc, #332]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	4a52      	ldr	r2, [pc, #328]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002846:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800284a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800284c:	4b50      	ldr	r3, [pc, #320]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	494d      	ldr	r1, [pc, #308]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	4313      	orrs	r3, r2
 800285c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	d044      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d107      	bne.n	8002882 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002872:	4b47      	ldr	r3, [pc, #284]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d119      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e07f      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b02      	cmp	r3, #2
 8002888:	d003      	beq.n	8002892 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800288e:	2b03      	cmp	r3, #3
 8002890:	d107      	bne.n	80028a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002892:	4b3f      	ldr	r3, [pc, #252]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d109      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e06f      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a2:	4b3b      	ldr	r3, [pc, #236]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e067      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028b2:	4b37      	ldr	r3, [pc, #220]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f023 0203 	bic.w	r2, r3, #3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	4934      	ldr	r1, [pc, #208]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028c4:	f7fe fa4c 	bl	8000d60 <HAL_GetTick>
 80028c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ca:	e00a      	b.n	80028e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028cc:	f7fe fa48 	bl	8000d60 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028da:	4293      	cmp	r3, r2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e04f      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e2:	4b2b      	ldr	r3, [pc, #172]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 020c 	and.w	r2, r3, #12
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d1eb      	bne.n	80028cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028f4:	4b25      	ldr	r3, [pc, #148]	; (800298c <HAL_RCC_ClockConfig+0x1b8>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d20c      	bcs.n	800291c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002902:	4b22      	ldr	r3, [pc, #136]	; (800298c <HAL_RCC_ClockConfig+0x1b8>)
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800290a:	4b20      	ldr	r3, [pc, #128]	; (800298c <HAL_RCC_ClockConfig+0x1b8>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	429a      	cmp	r2, r3
 8002916:	d001      	beq.n	800291c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e032      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b00      	cmp	r3, #0
 8002926:	d008      	beq.n	800293a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002928:	4b19      	ldr	r3, [pc, #100]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	4916      	ldr	r1, [pc, #88]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002936:	4313      	orrs	r3, r2
 8002938:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0308 	and.w	r3, r3, #8
 8002942:	2b00      	cmp	r3, #0
 8002944:	d009      	beq.n	800295a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002946:	4b12      	ldr	r3, [pc, #72]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	490e      	ldr	r1, [pc, #56]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	4313      	orrs	r3, r2
 8002958:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800295a:	f000 f821 	bl	80029a0 <HAL_RCC_GetSysClockFreq>
 800295e:	4602      	mov	r2, r0
 8002960:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	091b      	lsrs	r3, r3, #4
 8002966:	f003 030f 	and.w	r3, r3, #15
 800296a:	490a      	ldr	r1, [pc, #40]	; (8002994 <HAL_RCC_ClockConfig+0x1c0>)
 800296c:	5ccb      	ldrb	r3, [r1, r3]
 800296e:	fa22 f303 	lsr.w	r3, r2, r3
 8002972:	4a09      	ldr	r2, [pc, #36]	; (8002998 <HAL_RCC_ClockConfig+0x1c4>)
 8002974:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002976:	4b09      	ldr	r3, [pc, #36]	; (800299c <HAL_RCC_ClockConfig+0x1c8>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f7fe f9ac 	bl	8000cd8 <HAL_InitTick>

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40023c00 	.word	0x40023c00
 8002990:	40023800 	.word	0x40023800
 8002994:	08003d00 	.word	0x08003d00
 8002998:	20000000 	.word	0x20000000
 800299c:	20000004 	.word	0x20000004

080029a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029a4:	b094      	sub	sp, #80	; 0x50
 80029a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	647b      	str	r3, [r7, #68]	; 0x44
 80029ac:	2300      	movs	r3, #0
 80029ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029b0:	2300      	movs	r3, #0
 80029b2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029b8:	4b79      	ldr	r3, [pc, #484]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 030c 	and.w	r3, r3, #12
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d00d      	beq.n	80029e0 <HAL_RCC_GetSysClockFreq+0x40>
 80029c4:	2b08      	cmp	r3, #8
 80029c6:	f200 80e1 	bhi.w	8002b8c <HAL_RCC_GetSysClockFreq+0x1ec>
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d002      	beq.n	80029d4 <HAL_RCC_GetSysClockFreq+0x34>
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d003      	beq.n	80029da <HAL_RCC_GetSysClockFreq+0x3a>
 80029d2:	e0db      	b.n	8002b8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029d4:	4b73      	ldr	r3, [pc, #460]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x204>)
 80029d6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80029d8:	e0db      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029da:	4b73      	ldr	r3, [pc, #460]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x208>)
 80029dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029de:	e0d8      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029e0:	4b6f      	ldr	r3, [pc, #444]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029e8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029ea:	4b6d      	ldr	r3, [pc, #436]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d063      	beq.n	8002abe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029f6:	4b6a      	ldr	r3, [pc, #424]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	099b      	lsrs	r3, r3, #6
 80029fc:	2200      	movs	r2, #0
 80029fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a00:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a08:	633b      	str	r3, [r7, #48]	; 0x30
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8002a0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a12:	4622      	mov	r2, r4
 8002a14:	462b      	mov	r3, r5
 8002a16:	f04f 0000 	mov.w	r0, #0
 8002a1a:	f04f 0100 	mov.w	r1, #0
 8002a1e:	0159      	lsls	r1, r3, #5
 8002a20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a24:	0150      	lsls	r0, r2, #5
 8002a26:	4602      	mov	r2, r0
 8002a28:	460b      	mov	r3, r1
 8002a2a:	4621      	mov	r1, r4
 8002a2c:	1a51      	subs	r1, r2, r1
 8002a2e:	6139      	str	r1, [r7, #16]
 8002a30:	4629      	mov	r1, r5
 8002a32:	eb63 0301 	sbc.w	r3, r3, r1
 8002a36:	617b      	str	r3, [r7, #20]
 8002a38:	f04f 0200 	mov.w	r2, #0
 8002a3c:	f04f 0300 	mov.w	r3, #0
 8002a40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a44:	4659      	mov	r1, fp
 8002a46:	018b      	lsls	r3, r1, #6
 8002a48:	4651      	mov	r1, sl
 8002a4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a4e:	4651      	mov	r1, sl
 8002a50:	018a      	lsls	r2, r1, #6
 8002a52:	4651      	mov	r1, sl
 8002a54:	ebb2 0801 	subs.w	r8, r2, r1
 8002a58:	4659      	mov	r1, fp
 8002a5a:	eb63 0901 	sbc.w	r9, r3, r1
 8002a5e:	f04f 0200 	mov.w	r2, #0
 8002a62:	f04f 0300 	mov.w	r3, #0
 8002a66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a72:	4690      	mov	r8, r2
 8002a74:	4699      	mov	r9, r3
 8002a76:	4623      	mov	r3, r4
 8002a78:	eb18 0303 	adds.w	r3, r8, r3
 8002a7c:	60bb      	str	r3, [r7, #8]
 8002a7e:	462b      	mov	r3, r5
 8002a80:	eb49 0303 	adc.w	r3, r9, r3
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	f04f 0200 	mov.w	r2, #0
 8002a8a:	f04f 0300 	mov.w	r3, #0
 8002a8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a92:	4629      	mov	r1, r5
 8002a94:	024b      	lsls	r3, r1, #9
 8002a96:	4621      	mov	r1, r4
 8002a98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a9c:	4621      	mov	r1, r4
 8002a9e:	024a      	lsls	r2, r1, #9
 8002aa0:	4610      	mov	r0, r2
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aaa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002aac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ab0:	f7fd fbe6 	bl	8000280 <__aeabi_uldivmod>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	4613      	mov	r3, r2
 8002aba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002abc:	e058      	b.n	8002b70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002abe:	4b38      	ldr	r3, [pc, #224]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	099b      	lsrs	r3, r3, #6
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	4611      	mov	r1, r2
 8002aca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ace:	623b      	str	r3, [r7, #32]
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ad4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ad8:	4642      	mov	r2, r8
 8002ada:	464b      	mov	r3, r9
 8002adc:	f04f 0000 	mov.w	r0, #0
 8002ae0:	f04f 0100 	mov.w	r1, #0
 8002ae4:	0159      	lsls	r1, r3, #5
 8002ae6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002aea:	0150      	lsls	r0, r2, #5
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	4641      	mov	r1, r8
 8002af2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002af6:	4649      	mov	r1, r9
 8002af8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	f04f 0300 	mov.w	r3, #0
 8002b04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b10:	ebb2 040a 	subs.w	r4, r2, sl
 8002b14:	eb63 050b 	sbc.w	r5, r3, fp
 8002b18:	f04f 0200 	mov.w	r2, #0
 8002b1c:	f04f 0300 	mov.w	r3, #0
 8002b20:	00eb      	lsls	r3, r5, #3
 8002b22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b26:	00e2      	lsls	r2, r4, #3
 8002b28:	4614      	mov	r4, r2
 8002b2a:	461d      	mov	r5, r3
 8002b2c:	4643      	mov	r3, r8
 8002b2e:	18e3      	adds	r3, r4, r3
 8002b30:	603b      	str	r3, [r7, #0]
 8002b32:	464b      	mov	r3, r9
 8002b34:	eb45 0303 	adc.w	r3, r5, r3
 8002b38:	607b      	str	r3, [r7, #4]
 8002b3a:	f04f 0200 	mov.w	r2, #0
 8002b3e:	f04f 0300 	mov.w	r3, #0
 8002b42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b46:	4629      	mov	r1, r5
 8002b48:	028b      	lsls	r3, r1, #10
 8002b4a:	4621      	mov	r1, r4
 8002b4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b50:	4621      	mov	r1, r4
 8002b52:	028a      	lsls	r2, r1, #10
 8002b54:	4610      	mov	r0, r2
 8002b56:	4619      	mov	r1, r3
 8002b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	61bb      	str	r3, [r7, #24]
 8002b5e:	61fa      	str	r2, [r7, #28]
 8002b60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b64:	f7fd fb8c 	bl	8000280 <__aeabi_uldivmod>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b70:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	0c1b      	lsrs	r3, r3, #16
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002b80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b8a:	e002      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b8c:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b8e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3750      	adds	r7, #80	; 0x50
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	00f42400 	.word	0x00f42400
 8002ba8:	007a1200 	.word	0x007a1200

08002bac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bb0:	4b03      	ldr	r3, [pc, #12]	; (8002bc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	20000000 	.word	0x20000000

08002bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bc8:	f7ff fff0 	bl	8002bac <HAL_RCC_GetHCLKFreq>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	0a9b      	lsrs	r3, r3, #10
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	4903      	ldr	r1, [pc, #12]	; (8002be8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bda:	5ccb      	ldrb	r3, [r1, r3]
 8002bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40023800 	.word	0x40023800
 8002be8:	08003d10 	.word	0x08003d10

08002bec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002bf0:	f7ff ffdc 	bl	8002bac <HAL_RCC_GetHCLKFreq>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	4b05      	ldr	r3, [pc, #20]	; (8002c0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	0b5b      	lsrs	r3, r3, #13
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	4903      	ldr	r1, [pc, #12]	; (8002c10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c02:	5ccb      	ldrb	r3, [r1, r3]
 8002c04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	08003d10 	.word	0x08003d10

08002c14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e03f      	b.n	8002ca6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d106      	bne.n	8002c40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7fd ff38 	bl	8000ab0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2224      	movs	r2, #36	; 0x24
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 f929 	bl	8002eb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	691a      	ldr	r2, [r3, #16]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	695a      	ldr	r2, [r3, #20]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68da      	ldr	r2, [r3, #12]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2220      	movs	r2, #32
 8002c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b08a      	sub	sp, #40	; 0x28
 8002cb2:	af02      	add	r7, sp, #8
 8002cb4:	60f8      	str	r0, [r7, #12]
 8002cb6:	60b9      	str	r1, [r7, #8]
 8002cb8:	603b      	str	r3, [r7, #0]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b20      	cmp	r3, #32
 8002ccc:	d17c      	bne.n	8002dc8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d002      	beq.n	8002cda <HAL_UART_Transmit+0x2c>
 8002cd4:	88fb      	ldrh	r3, [r7, #6]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e075      	b.n	8002dca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d101      	bne.n	8002cec <HAL_UART_Transmit+0x3e>
 8002ce8:	2302      	movs	r3, #2
 8002cea:	e06e      	b.n	8002dca <HAL_UART_Transmit+0x11c>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2221      	movs	r2, #33	; 0x21
 8002cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d02:	f7fe f82d 	bl	8000d60 <HAL_GetTick>
 8002d06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	88fa      	ldrh	r2, [r7, #6]
 8002d0c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	88fa      	ldrh	r2, [r7, #6]
 8002d12:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d1c:	d108      	bne.n	8002d30 <HAL_UART_Transmit+0x82>
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d104      	bne.n	8002d30 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002d26:	2300      	movs	r3, #0
 8002d28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	61bb      	str	r3, [r7, #24]
 8002d2e:	e003      	b.n	8002d38 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d34:	2300      	movs	r3, #0
 8002d36:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002d40:	e02a      	b.n	8002d98 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	2180      	movs	r1, #128	; 0x80
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 f840 	bl	8002dd2 <UART_WaitOnFlagUntilTimeout>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e036      	b.n	8002dca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10b      	bne.n	8002d7a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	881b      	ldrh	r3, [r3, #0]
 8002d66:	461a      	mov	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	3302      	adds	r3, #2
 8002d76:	61bb      	str	r3, [r7, #24]
 8002d78:	e007      	b.n	8002d8a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	781a      	ldrb	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	3301      	adds	r3, #1
 8002d88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	3b01      	subs	r3, #1
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1cf      	bne.n	8002d42 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	2200      	movs	r2, #0
 8002daa:	2140      	movs	r1, #64	; 0x40
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f000 f810 	bl	8002dd2 <UART_WaitOnFlagUntilTimeout>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e006      	b.n	8002dca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	e000      	b.n	8002dca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002dc8:	2302      	movs	r3, #2
  }
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3720      	adds	r7, #32
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b090      	sub	sp, #64	; 0x40
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	60f8      	str	r0, [r7, #12]
 8002dda:	60b9      	str	r1, [r7, #8]
 8002ddc:	603b      	str	r3, [r7, #0]
 8002dde:	4613      	mov	r3, r2
 8002de0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002de2:	e050      	b.n	8002e86 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002de4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002de6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dea:	d04c      	beq.n	8002e86 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002dec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d007      	beq.n	8002e02 <UART_WaitOnFlagUntilTimeout+0x30>
 8002df2:	f7fd ffb5 	bl	8000d60 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d241      	bcs.n	8002e86 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	330c      	adds	r3, #12
 8002e08:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0c:	e853 3f00 	ldrex	r3, [r3]
 8002e10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	330c      	adds	r3, #12
 8002e20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e22:	637a      	str	r2, [r7, #52]	; 0x34
 8002e24:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e2a:	e841 2300 	strex	r3, r2, [r1]
 8002e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1e5      	bne.n	8002e02 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	3314      	adds	r3, #20
 8002e3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	e853 3f00 	ldrex	r3, [r3]
 8002e44:	613b      	str	r3, [r7, #16]
   return(result);
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	f023 0301 	bic.w	r3, r3, #1
 8002e4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	3314      	adds	r3, #20
 8002e54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e56:	623a      	str	r2, [r7, #32]
 8002e58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e5a:	69f9      	ldr	r1, [r7, #28]
 8002e5c:	6a3a      	ldr	r2, [r7, #32]
 8002e5e:	e841 2300 	strex	r3, r2, [r1]
 8002e62:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1e5      	bne.n	8002e36 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2220      	movs	r2, #32
 8002e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e00f      	b.n	8002ea6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	68ba      	ldr	r2, [r7, #8]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	bf0c      	ite	eq
 8002e96:	2301      	moveq	r3, #1
 8002e98:	2300      	movne	r3, #0
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	79fb      	ldrb	r3, [r7, #7]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d09f      	beq.n	8002de4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3740      	adds	r7, #64	; 0x40
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
	...

08002eb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002eb4:	b0c0      	sub	sp, #256	; 0x100
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ecc:	68d9      	ldr	r1, [r3, #12]
 8002ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	ea40 0301 	orr.w	r3, r0, r1
 8002ed8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef4:	69db      	ldr	r3, [r3, #28]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002f08:	f021 010c 	bic.w	r1, r1, #12
 8002f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002f16:	430b      	orrs	r3, r1
 8002f18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f2a:	6999      	ldr	r1, [r3, #24]
 8002f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	ea40 0301 	orr.w	r3, r0, r1
 8002f36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	4b8f      	ldr	r3, [pc, #572]	; (800317c <UART_SetConfig+0x2cc>)
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d005      	beq.n	8002f50 <UART_SetConfig+0xa0>
 8002f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	4b8d      	ldr	r3, [pc, #564]	; (8003180 <UART_SetConfig+0x2d0>)
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d104      	bne.n	8002f5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f50:	f7ff fe4c 	bl	8002bec <HAL_RCC_GetPCLK2Freq>
 8002f54:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002f58:	e003      	b.n	8002f62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f5a:	f7ff fe33 	bl	8002bc4 <HAL_RCC_GetPCLK1Freq>
 8002f5e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f6c:	f040 810c 	bne.w	8003188 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f74:	2200      	movs	r2, #0
 8002f76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f7a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002f82:	4622      	mov	r2, r4
 8002f84:	462b      	mov	r3, r5
 8002f86:	1891      	adds	r1, r2, r2
 8002f88:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f8a:	415b      	adcs	r3, r3
 8002f8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f92:	4621      	mov	r1, r4
 8002f94:	eb12 0801 	adds.w	r8, r2, r1
 8002f98:	4629      	mov	r1, r5
 8002f9a:	eb43 0901 	adc.w	r9, r3, r1
 8002f9e:	f04f 0200 	mov.w	r2, #0
 8002fa2:	f04f 0300 	mov.w	r3, #0
 8002fa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002faa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fb2:	4690      	mov	r8, r2
 8002fb4:	4699      	mov	r9, r3
 8002fb6:	4623      	mov	r3, r4
 8002fb8:	eb18 0303 	adds.w	r3, r8, r3
 8002fbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002fc0:	462b      	mov	r3, r5
 8002fc2:	eb49 0303 	adc.w	r3, r9, r3
 8002fc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002fd6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002fda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002fde:	460b      	mov	r3, r1
 8002fe0:	18db      	adds	r3, r3, r3
 8002fe2:	653b      	str	r3, [r7, #80]	; 0x50
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	eb42 0303 	adc.w	r3, r2, r3
 8002fea:	657b      	str	r3, [r7, #84]	; 0x54
 8002fec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002ff0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002ff4:	f7fd f944 	bl	8000280 <__aeabi_uldivmod>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4b61      	ldr	r3, [pc, #388]	; (8003184 <UART_SetConfig+0x2d4>)
 8002ffe:	fba3 2302 	umull	r2, r3, r3, r2
 8003002:	095b      	lsrs	r3, r3, #5
 8003004:	011c      	lsls	r4, r3, #4
 8003006:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800300a:	2200      	movs	r2, #0
 800300c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003010:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003014:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003018:	4642      	mov	r2, r8
 800301a:	464b      	mov	r3, r9
 800301c:	1891      	adds	r1, r2, r2
 800301e:	64b9      	str	r1, [r7, #72]	; 0x48
 8003020:	415b      	adcs	r3, r3
 8003022:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003024:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003028:	4641      	mov	r1, r8
 800302a:	eb12 0a01 	adds.w	sl, r2, r1
 800302e:	4649      	mov	r1, r9
 8003030:	eb43 0b01 	adc.w	fp, r3, r1
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	f04f 0300 	mov.w	r3, #0
 800303c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003040:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003044:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003048:	4692      	mov	sl, r2
 800304a:	469b      	mov	fp, r3
 800304c:	4643      	mov	r3, r8
 800304e:	eb1a 0303 	adds.w	r3, sl, r3
 8003052:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003056:	464b      	mov	r3, r9
 8003058:	eb4b 0303 	adc.w	r3, fp, r3
 800305c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800306c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003070:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003074:	460b      	mov	r3, r1
 8003076:	18db      	adds	r3, r3, r3
 8003078:	643b      	str	r3, [r7, #64]	; 0x40
 800307a:	4613      	mov	r3, r2
 800307c:	eb42 0303 	adc.w	r3, r2, r3
 8003080:	647b      	str	r3, [r7, #68]	; 0x44
 8003082:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003086:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800308a:	f7fd f8f9 	bl	8000280 <__aeabi_uldivmod>
 800308e:	4602      	mov	r2, r0
 8003090:	460b      	mov	r3, r1
 8003092:	4611      	mov	r1, r2
 8003094:	4b3b      	ldr	r3, [pc, #236]	; (8003184 <UART_SetConfig+0x2d4>)
 8003096:	fba3 2301 	umull	r2, r3, r3, r1
 800309a:	095b      	lsrs	r3, r3, #5
 800309c:	2264      	movs	r2, #100	; 0x64
 800309e:	fb02 f303 	mul.w	r3, r2, r3
 80030a2:	1acb      	subs	r3, r1, r3
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80030aa:	4b36      	ldr	r3, [pc, #216]	; (8003184 <UART_SetConfig+0x2d4>)
 80030ac:	fba3 2302 	umull	r2, r3, r3, r2
 80030b0:	095b      	lsrs	r3, r3, #5
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030b8:	441c      	add	r4, r3
 80030ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030be:	2200      	movs	r2, #0
 80030c0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80030c4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80030c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80030cc:	4642      	mov	r2, r8
 80030ce:	464b      	mov	r3, r9
 80030d0:	1891      	adds	r1, r2, r2
 80030d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80030d4:	415b      	adcs	r3, r3
 80030d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80030dc:	4641      	mov	r1, r8
 80030de:	1851      	adds	r1, r2, r1
 80030e0:	6339      	str	r1, [r7, #48]	; 0x30
 80030e2:	4649      	mov	r1, r9
 80030e4:	414b      	adcs	r3, r1
 80030e6:	637b      	str	r3, [r7, #52]	; 0x34
 80030e8:	f04f 0200 	mov.w	r2, #0
 80030ec:	f04f 0300 	mov.w	r3, #0
 80030f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80030f4:	4659      	mov	r1, fp
 80030f6:	00cb      	lsls	r3, r1, #3
 80030f8:	4651      	mov	r1, sl
 80030fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030fe:	4651      	mov	r1, sl
 8003100:	00ca      	lsls	r2, r1, #3
 8003102:	4610      	mov	r0, r2
 8003104:	4619      	mov	r1, r3
 8003106:	4603      	mov	r3, r0
 8003108:	4642      	mov	r2, r8
 800310a:	189b      	adds	r3, r3, r2
 800310c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003110:	464b      	mov	r3, r9
 8003112:	460a      	mov	r2, r1
 8003114:	eb42 0303 	adc.w	r3, r2, r3
 8003118:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800311c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003128:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800312c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003130:	460b      	mov	r3, r1
 8003132:	18db      	adds	r3, r3, r3
 8003134:	62bb      	str	r3, [r7, #40]	; 0x28
 8003136:	4613      	mov	r3, r2
 8003138:	eb42 0303 	adc.w	r3, r2, r3
 800313c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800313e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003142:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003146:	f7fd f89b 	bl	8000280 <__aeabi_uldivmod>
 800314a:	4602      	mov	r2, r0
 800314c:	460b      	mov	r3, r1
 800314e:	4b0d      	ldr	r3, [pc, #52]	; (8003184 <UART_SetConfig+0x2d4>)
 8003150:	fba3 1302 	umull	r1, r3, r3, r2
 8003154:	095b      	lsrs	r3, r3, #5
 8003156:	2164      	movs	r1, #100	; 0x64
 8003158:	fb01 f303 	mul.w	r3, r1, r3
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	3332      	adds	r3, #50	; 0x32
 8003162:	4a08      	ldr	r2, [pc, #32]	; (8003184 <UART_SetConfig+0x2d4>)
 8003164:	fba2 2303 	umull	r2, r3, r2, r3
 8003168:	095b      	lsrs	r3, r3, #5
 800316a:	f003 0207 	and.w	r2, r3, #7
 800316e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4422      	add	r2, r4
 8003176:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003178:	e106      	b.n	8003388 <UART_SetConfig+0x4d8>
 800317a:	bf00      	nop
 800317c:	40011000 	.word	0x40011000
 8003180:	40011400 	.word	0x40011400
 8003184:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003188:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800318c:	2200      	movs	r2, #0
 800318e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003192:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003196:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800319a:	4642      	mov	r2, r8
 800319c:	464b      	mov	r3, r9
 800319e:	1891      	adds	r1, r2, r2
 80031a0:	6239      	str	r1, [r7, #32]
 80031a2:	415b      	adcs	r3, r3
 80031a4:	627b      	str	r3, [r7, #36]	; 0x24
 80031a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031aa:	4641      	mov	r1, r8
 80031ac:	1854      	adds	r4, r2, r1
 80031ae:	4649      	mov	r1, r9
 80031b0:	eb43 0501 	adc.w	r5, r3, r1
 80031b4:	f04f 0200 	mov.w	r2, #0
 80031b8:	f04f 0300 	mov.w	r3, #0
 80031bc:	00eb      	lsls	r3, r5, #3
 80031be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031c2:	00e2      	lsls	r2, r4, #3
 80031c4:	4614      	mov	r4, r2
 80031c6:	461d      	mov	r5, r3
 80031c8:	4643      	mov	r3, r8
 80031ca:	18e3      	adds	r3, r4, r3
 80031cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80031d0:	464b      	mov	r3, r9
 80031d2:	eb45 0303 	adc.w	r3, r5, r3
 80031d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80031da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80031e6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80031ea:	f04f 0200 	mov.w	r2, #0
 80031ee:	f04f 0300 	mov.w	r3, #0
 80031f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80031f6:	4629      	mov	r1, r5
 80031f8:	008b      	lsls	r3, r1, #2
 80031fa:	4621      	mov	r1, r4
 80031fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003200:	4621      	mov	r1, r4
 8003202:	008a      	lsls	r2, r1, #2
 8003204:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003208:	f7fd f83a 	bl	8000280 <__aeabi_uldivmod>
 800320c:	4602      	mov	r2, r0
 800320e:	460b      	mov	r3, r1
 8003210:	4b60      	ldr	r3, [pc, #384]	; (8003394 <UART_SetConfig+0x4e4>)
 8003212:	fba3 2302 	umull	r2, r3, r3, r2
 8003216:	095b      	lsrs	r3, r3, #5
 8003218:	011c      	lsls	r4, r3, #4
 800321a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800321e:	2200      	movs	r2, #0
 8003220:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003224:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003228:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800322c:	4642      	mov	r2, r8
 800322e:	464b      	mov	r3, r9
 8003230:	1891      	adds	r1, r2, r2
 8003232:	61b9      	str	r1, [r7, #24]
 8003234:	415b      	adcs	r3, r3
 8003236:	61fb      	str	r3, [r7, #28]
 8003238:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800323c:	4641      	mov	r1, r8
 800323e:	1851      	adds	r1, r2, r1
 8003240:	6139      	str	r1, [r7, #16]
 8003242:	4649      	mov	r1, r9
 8003244:	414b      	adcs	r3, r1
 8003246:	617b      	str	r3, [r7, #20]
 8003248:	f04f 0200 	mov.w	r2, #0
 800324c:	f04f 0300 	mov.w	r3, #0
 8003250:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003254:	4659      	mov	r1, fp
 8003256:	00cb      	lsls	r3, r1, #3
 8003258:	4651      	mov	r1, sl
 800325a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800325e:	4651      	mov	r1, sl
 8003260:	00ca      	lsls	r2, r1, #3
 8003262:	4610      	mov	r0, r2
 8003264:	4619      	mov	r1, r3
 8003266:	4603      	mov	r3, r0
 8003268:	4642      	mov	r2, r8
 800326a:	189b      	adds	r3, r3, r2
 800326c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003270:	464b      	mov	r3, r9
 8003272:	460a      	mov	r2, r1
 8003274:	eb42 0303 	adc.w	r3, r2, r3
 8003278:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800327c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	67bb      	str	r3, [r7, #120]	; 0x78
 8003286:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003288:	f04f 0200 	mov.w	r2, #0
 800328c:	f04f 0300 	mov.w	r3, #0
 8003290:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003294:	4649      	mov	r1, r9
 8003296:	008b      	lsls	r3, r1, #2
 8003298:	4641      	mov	r1, r8
 800329a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800329e:	4641      	mov	r1, r8
 80032a0:	008a      	lsls	r2, r1, #2
 80032a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80032a6:	f7fc ffeb 	bl	8000280 <__aeabi_uldivmod>
 80032aa:	4602      	mov	r2, r0
 80032ac:	460b      	mov	r3, r1
 80032ae:	4611      	mov	r1, r2
 80032b0:	4b38      	ldr	r3, [pc, #224]	; (8003394 <UART_SetConfig+0x4e4>)
 80032b2:	fba3 2301 	umull	r2, r3, r3, r1
 80032b6:	095b      	lsrs	r3, r3, #5
 80032b8:	2264      	movs	r2, #100	; 0x64
 80032ba:	fb02 f303 	mul.w	r3, r2, r3
 80032be:	1acb      	subs	r3, r1, r3
 80032c0:	011b      	lsls	r3, r3, #4
 80032c2:	3332      	adds	r3, #50	; 0x32
 80032c4:	4a33      	ldr	r2, [pc, #204]	; (8003394 <UART_SetConfig+0x4e4>)
 80032c6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ca:	095b      	lsrs	r3, r3, #5
 80032cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032d0:	441c      	add	r4, r3
 80032d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032d6:	2200      	movs	r2, #0
 80032d8:	673b      	str	r3, [r7, #112]	; 0x70
 80032da:	677a      	str	r2, [r7, #116]	; 0x74
 80032dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80032e0:	4642      	mov	r2, r8
 80032e2:	464b      	mov	r3, r9
 80032e4:	1891      	adds	r1, r2, r2
 80032e6:	60b9      	str	r1, [r7, #8]
 80032e8:	415b      	adcs	r3, r3
 80032ea:	60fb      	str	r3, [r7, #12]
 80032ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032f0:	4641      	mov	r1, r8
 80032f2:	1851      	adds	r1, r2, r1
 80032f4:	6039      	str	r1, [r7, #0]
 80032f6:	4649      	mov	r1, r9
 80032f8:	414b      	adcs	r3, r1
 80032fa:	607b      	str	r3, [r7, #4]
 80032fc:	f04f 0200 	mov.w	r2, #0
 8003300:	f04f 0300 	mov.w	r3, #0
 8003304:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003308:	4659      	mov	r1, fp
 800330a:	00cb      	lsls	r3, r1, #3
 800330c:	4651      	mov	r1, sl
 800330e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003312:	4651      	mov	r1, sl
 8003314:	00ca      	lsls	r2, r1, #3
 8003316:	4610      	mov	r0, r2
 8003318:	4619      	mov	r1, r3
 800331a:	4603      	mov	r3, r0
 800331c:	4642      	mov	r2, r8
 800331e:	189b      	adds	r3, r3, r2
 8003320:	66bb      	str	r3, [r7, #104]	; 0x68
 8003322:	464b      	mov	r3, r9
 8003324:	460a      	mov	r2, r1
 8003326:	eb42 0303 	adc.w	r3, r2, r3
 800332a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800332c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	663b      	str	r3, [r7, #96]	; 0x60
 8003336:	667a      	str	r2, [r7, #100]	; 0x64
 8003338:	f04f 0200 	mov.w	r2, #0
 800333c:	f04f 0300 	mov.w	r3, #0
 8003340:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003344:	4649      	mov	r1, r9
 8003346:	008b      	lsls	r3, r1, #2
 8003348:	4641      	mov	r1, r8
 800334a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800334e:	4641      	mov	r1, r8
 8003350:	008a      	lsls	r2, r1, #2
 8003352:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003356:	f7fc ff93 	bl	8000280 <__aeabi_uldivmod>
 800335a:	4602      	mov	r2, r0
 800335c:	460b      	mov	r3, r1
 800335e:	4b0d      	ldr	r3, [pc, #52]	; (8003394 <UART_SetConfig+0x4e4>)
 8003360:	fba3 1302 	umull	r1, r3, r3, r2
 8003364:	095b      	lsrs	r3, r3, #5
 8003366:	2164      	movs	r1, #100	; 0x64
 8003368:	fb01 f303 	mul.w	r3, r1, r3
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	3332      	adds	r3, #50	; 0x32
 8003372:	4a08      	ldr	r2, [pc, #32]	; (8003394 <UART_SetConfig+0x4e4>)
 8003374:	fba2 2303 	umull	r2, r3, r2, r3
 8003378:	095b      	lsrs	r3, r3, #5
 800337a:	f003 020f 	and.w	r2, r3, #15
 800337e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4422      	add	r2, r4
 8003386:	609a      	str	r2, [r3, #8]
}
 8003388:	bf00      	nop
 800338a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800338e:	46bd      	mov	sp, r7
 8003390:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003394:	51eb851f 	.word	0x51eb851f

08003398 <siprintf>:
 8003398:	b40e      	push	{r1, r2, r3}
 800339a:	b500      	push	{lr}
 800339c:	b09c      	sub	sp, #112	; 0x70
 800339e:	ab1d      	add	r3, sp, #116	; 0x74
 80033a0:	9002      	str	r0, [sp, #8]
 80033a2:	9006      	str	r0, [sp, #24]
 80033a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80033a8:	4809      	ldr	r0, [pc, #36]	; (80033d0 <siprintf+0x38>)
 80033aa:	9107      	str	r1, [sp, #28]
 80033ac:	9104      	str	r1, [sp, #16]
 80033ae:	4909      	ldr	r1, [pc, #36]	; (80033d4 <siprintf+0x3c>)
 80033b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80033b4:	9105      	str	r1, [sp, #20]
 80033b6:	6800      	ldr	r0, [r0, #0]
 80033b8:	9301      	str	r3, [sp, #4]
 80033ba:	a902      	add	r1, sp, #8
 80033bc:	f000 f992 	bl	80036e4 <_svfiprintf_r>
 80033c0:	9b02      	ldr	r3, [sp, #8]
 80033c2:	2200      	movs	r2, #0
 80033c4:	701a      	strb	r2, [r3, #0]
 80033c6:	b01c      	add	sp, #112	; 0x70
 80033c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80033cc:	b003      	add	sp, #12
 80033ce:	4770      	bx	lr
 80033d0:	20000058 	.word	0x20000058
 80033d4:	ffff0208 	.word	0xffff0208

080033d8 <memset>:
 80033d8:	4402      	add	r2, r0
 80033da:	4603      	mov	r3, r0
 80033dc:	4293      	cmp	r3, r2
 80033de:	d100      	bne.n	80033e2 <memset+0xa>
 80033e0:	4770      	bx	lr
 80033e2:	f803 1b01 	strb.w	r1, [r3], #1
 80033e6:	e7f9      	b.n	80033dc <memset+0x4>

080033e8 <__errno>:
 80033e8:	4b01      	ldr	r3, [pc, #4]	; (80033f0 <__errno+0x8>)
 80033ea:	6818      	ldr	r0, [r3, #0]
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	20000058 	.word	0x20000058

080033f4 <__libc_init_array>:
 80033f4:	b570      	push	{r4, r5, r6, lr}
 80033f6:	4d0d      	ldr	r5, [pc, #52]	; (800342c <__libc_init_array+0x38>)
 80033f8:	4c0d      	ldr	r4, [pc, #52]	; (8003430 <__libc_init_array+0x3c>)
 80033fa:	1b64      	subs	r4, r4, r5
 80033fc:	10a4      	asrs	r4, r4, #2
 80033fe:	2600      	movs	r6, #0
 8003400:	42a6      	cmp	r6, r4
 8003402:	d109      	bne.n	8003418 <__libc_init_array+0x24>
 8003404:	4d0b      	ldr	r5, [pc, #44]	; (8003434 <__libc_init_array+0x40>)
 8003406:	4c0c      	ldr	r4, [pc, #48]	; (8003438 <__libc_init_array+0x44>)
 8003408:	f000 fc6a 	bl	8003ce0 <_init>
 800340c:	1b64      	subs	r4, r4, r5
 800340e:	10a4      	asrs	r4, r4, #2
 8003410:	2600      	movs	r6, #0
 8003412:	42a6      	cmp	r6, r4
 8003414:	d105      	bne.n	8003422 <__libc_init_array+0x2e>
 8003416:	bd70      	pop	{r4, r5, r6, pc}
 8003418:	f855 3b04 	ldr.w	r3, [r5], #4
 800341c:	4798      	blx	r3
 800341e:	3601      	adds	r6, #1
 8003420:	e7ee      	b.n	8003400 <__libc_init_array+0xc>
 8003422:	f855 3b04 	ldr.w	r3, [r5], #4
 8003426:	4798      	blx	r3
 8003428:	3601      	adds	r6, #1
 800342a:	e7f2      	b.n	8003412 <__libc_init_array+0x1e>
 800342c:	08003d54 	.word	0x08003d54
 8003430:	08003d54 	.word	0x08003d54
 8003434:	08003d54 	.word	0x08003d54
 8003438:	08003d58 	.word	0x08003d58

0800343c <__retarget_lock_acquire_recursive>:
 800343c:	4770      	bx	lr

0800343e <__retarget_lock_release_recursive>:
 800343e:	4770      	bx	lr

08003440 <_free_r>:
 8003440:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003442:	2900      	cmp	r1, #0
 8003444:	d044      	beq.n	80034d0 <_free_r+0x90>
 8003446:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800344a:	9001      	str	r0, [sp, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	f1a1 0404 	sub.w	r4, r1, #4
 8003452:	bfb8      	it	lt
 8003454:	18e4      	addlt	r4, r4, r3
 8003456:	f000 f8df 	bl	8003618 <__malloc_lock>
 800345a:	4a1e      	ldr	r2, [pc, #120]	; (80034d4 <_free_r+0x94>)
 800345c:	9801      	ldr	r0, [sp, #4]
 800345e:	6813      	ldr	r3, [r2, #0]
 8003460:	b933      	cbnz	r3, 8003470 <_free_r+0x30>
 8003462:	6063      	str	r3, [r4, #4]
 8003464:	6014      	str	r4, [r2, #0]
 8003466:	b003      	add	sp, #12
 8003468:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800346c:	f000 b8da 	b.w	8003624 <__malloc_unlock>
 8003470:	42a3      	cmp	r3, r4
 8003472:	d908      	bls.n	8003486 <_free_r+0x46>
 8003474:	6825      	ldr	r5, [r4, #0]
 8003476:	1961      	adds	r1, r4, r5
 8003478:	428b      	cmp	r3, r1
 800347a:	bf01      	itttt	eq
 800347c:	6819      	ldreq	r1, [r3, #0]
 800347e:	685b      	ldreq	r3, [r3, #4]
 8003480:	1949      	addeq	r1, r1, r5
 8003482:	6021      	streq	r1, [r4, #0]
 8003484:	e7ed      	b.n	8003462 <_free_r+0x22>
 8003486:	461a      	mov	r2, r3
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	b10b      	cbz	r3, 8003490 <_free_r+0x50>
 800348c:	42a3      	cmp	r3, r4
 800348e:	d9fa      	bls.n	8003486 <_free_r+0x46>
 8003490:	6811      	ldr	r1, [r2, #0]
 8003492:	1855      	adds	r5, r2, r1
 8003494:	42a5      	cmp	r5, r4
 8003496:	d10b      	bne.n	80034b0 <_free_r+0x70>
 8003498:	6824      	ldr	r4, [r4, #0]
 800349a:	4421      	add	r1, r4
 800349c:	1854      	adds	r4, r2, r1
 800349e:	42a3      	cmp	r3, r4
 80034a0:	6011      	str	r1, [r2, #0]
 80034a2:	d1e0      	bne.n	8003466 <_free_r+0x26>
 80034a4:	681c      	ldr	r4, [r3, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	6053      	str	r3, [r2, #4]
 80034aa:	440c      	add	r4, r1
 80034ac:	6014      	str	r4, [r2, #0]
 80034ae:	e7da      	b.n	8003466 <_free_r+0x26>
 80034b0:	d902      	bls.n	80034b8 <_free_r+0x78>
 80034b2:	230c      	movs	r3, #12
 80034b4:	6003      	str	r3, [r0, #0]
 80034b6:	e7d6      	b.n	8003466 <_free_r+0x26>
 80034b8:	6825      	ldr	r5, [r4, #0]
 80034ba:	1961      	adds	r1, r4, r5
 80034bc:	428b      	cmp	r3, r1
 80034be:	bf04      	itt	eq
 80034c0:	6819      	ldreq	r1, [r3, #0]
 80034c2:	685b      	ldreq	r3, [r3, #4]
 80034c4:	6063      	str	r3, [r4, #4]
 80034c6:	bf04      	itt	eq
 80034c8:	1949      	addeq	r1, r1, r5
 80034ca:	6021      	streq	r1, [r4, #0]
 80034cc:	6054      	str	r4, [r2, #4]
 80034ce:	e7ca      	b.n	8003466 <_free_r+0x26>
 80034d0:	b003      	add	sp, #12
 80034d2:	bd30      	pop	{r4, r5, pc}
 80034d4:	20000258 	.word	0x20000258

080034d8 <sbrk_aligned>:
 80034d8:	b570      	push	{r4, r5, r6, lr}
 80034da:	4e0e      	ldr	r6, [pc, #56]	; (8003514 <sbrk_aligned+0x3c>)
 80034dc:	460c      	mov	r4, r1
 80034de:	6831      	ldr	r1, [r6, #0]
 80034e0:	4605      	mov	r5, r0
 80034e2:	b911      	cbnz	r1, 80034ea <sbrk_aligned+0x12>
 80034e4:	f000 fba6 	bl	8003c34 <_sbrk_r>
 80034e8:	6030      	str	r0, [r6, #0]
 80034ea:	4621      	mov	r1, r4
 80034ec:	4628      	mov	r0, r5
 80034ee:	f000 fba1 	bl	8003c34 <_sbrk_r>
 80034f2:	1c43      	adds	r3, r0, #1
 80034f4:	d00a      	beq.n	800350c <sbrk_aligned+0x34>
 80034f6:	1cc4      	adds	r4, r0, #3
 80034f8:	f024 0403 	bic.w	r4, r4, #3
 80034fc:	42a0      	cmp	r0, r4
 80034fe:	d007      	beq.n	8003510 <sbrk_aligned+0x38>
 8003500:	1a21      	subs	r1, r4, r0
 8003502:	4628      	mov	r0, r5
 8003504:	f000 fb96 	bl	8003c34 <_sbrk_r>
 8003508:	3001      	adds	r0, #1
 800350a:	d101      	bne.n	8003510 <sbrk_aligned+0x38>
 800350c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003510:	4620      	mov	r0, r4
 8003512:	bd70      	pop	{r4, r5, r6, pc}
 8003514:	2000025c 	.word	0x2000025c

08003518 <_malloc_r>:
 8003518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800351c:	1ccd      	adds	r5, r1, #3
 800351e:	f025 0503 	bic.w	r5, r5, #3
 8003522:	3508      	adds	r5, #8
 8003524:	2d0c      	cmp	r5, #12
 8003526:	bf38      	it	cc
 8003528:	250c      	movcc	r5, #12
 800352a:	2d00      	cmp	r5, #0
 800352c:	4607      	mov	r7, r0
 800352e:	db01      	blt.n	8003534 <_malloc_r+0x1c>
 8003530:	42a9      	cmp	r1, r5
 8003532:	d905      	bls.n	8003540 <_malloc_r+0x28>
 8003534:	230c      	movs	r3, #12
 8003536:	603b      	str	r3, [r7, #0]
 8003538:	2600      	movs	r6, #0
 800353a:	4630      	mov	r0, r6
 800353c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003540:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003614 <_malloc_r+0xfc>
 8003544:	f000 f868 	bl	8003618 <__malloc_lock>
 8003548:	f8d8 3000 	ldr.w	r3, [r8]
 800354c:	461c      	mov	r4, r3
 800354e:	bb5c      	cbnz	r4, 80035a8 <_malloc_r+0x90>
 8003550:	4629      	mov	r1, r5
 8003552:	4638      	mov	r0, r7
 8003554:	f7ff ffc0 	bl	80034d8 <sbrk_aligned>
 8003558:	1c43      	adds	r3, r0, #1
 800355a:	4604      	mov	r4, r0
 800355c:	d155      	bne.n	800360a <_malloc_r+0xf2>
 800355e:	f8d8 4000 	ldr.w	r4, [r8]
 8003562:	4626      	mov	r6, r4
 8003564:	2e00      	cmp	r6, #0
 8003566:	d145      	bne.n	80035f4 <_malloc_r+0xdc>
 8003568:	2c00      	cmp	r4, #0
 800356a:	d048      	beq.n	80035fe <_malloc_r+0xe6>
 800356c:	6823      	ldr	r3, [r4, #0]
 800356e:	4631      	mov	r1, r6
 8003570:	4638      	mov	r0, r7
 8003572:	eb04 0903 	add.w	r9, r4, r3
 8003576:	f000 fb5d 	bl	8003c34 <_sbrk_r>
 800357a:	4581      	cmp	r9, r0
 800357c:	d13f      	bne.n	80035fe <_malloc_r+0xe6>
 800357e:	6821      	ldr	r1, [r4, #0]
 8003580:	1a6d      	subs	r5, r5, r1
 8003582:	4629      	mov	r1, r5
 8003584:	4638      	mov	r0, r7
 8003586:	f7ff ffa7 	bl	80034d8 <sbrk_aligned>
 800358a:	3001      	adds	r0, #1
 800358c:	d037      	beq.n	80035fe <_malloc_r+0xe6>
 800358e:	6823      	ldr	r3, [r4, #0]
 8003590:	442b      	add	r3, r5
 8003592:	6023      	str	r3, [r4, #0]
 8003594:	f8d8 3000 	ldr.w	r3, [r8]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d038      	beq.n	800360e <_malloc_r+0xf6>
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	42a2      	cmp	r2, r4
 80035a0:	d12b      	bne.n	80035fa <_malloc_r+0xe2>
 80035a2:	2200      	movs	r2, #0
 80035a4:	605a      	str	r2, [r3, #4]
 80035a6:	e00f      	b.n	80035c8 <_malloc_r+0xb0>
 80035a8:	6822      	ldr	r2, [r4, #0]
 80035aa:	1b52      	subs	r2, r2, r5
 80035ac:	d41f      	bmi.n	80035ee <_malloc_r+0xd6>
 80035ae:	2a0b      	cmp	r2, #11
 80035b0:	d917      	bls.n	80035e2 <_malloc_r+0xca>
 80035b2:	1961      	adds	r1, r4, r5
 80035b4:	42a3      	cmp	r3, r4
 80035b6:	6025      	str	r5, [r4, #0]
 80035b8:	bf18      	it	ne
 80035ba:	6059      	strne	r1, [r3, #4]
 80035bc:	6863      	ldr	r3, [r4, #4]
 80035be:	bf08      	it	eq
 80035c0:	f8c8 1000 	streq.w	r1, [r8]
 80035c4:	5162      	str	r2, [r4, r5]
 80035c6:	604b      	str	r3, [r1, #4]
 80035c8:	4638      	mov	r0, r7
 80035ca:	f104 060b 	add.w	r6, r4, #11
 80035ce:	f000 f829 	bl	8003624 <__malloc_unlock>
 80035d2:	f026 0607 	bic.w	r6, r6, #7
 80035d6:	1d23      	adds	r3, r4, #4
 80035d8:	1af2      	subs	r2, r6, r3
 80035da:	d0ae      	beq.n	800353a <_malloc_r+0x22>
 80035dc:	1b9b      	subs	r3, r3, r6
 80035de:	50a3      	str	r3, [r4, r2]
 80035e0:	e7ab      	b.n	800353a <_malloc_r+0x22>
 80035e2:	42a3      	cmp	r3, r4
 80035e4:	6862      	ldr	r2, [r4, #4]
 80035e6:	d1dd      	bne.n	80035a4 <_malloc_r+0x8c>
 80035e8:	f8c8 2000 	str.w	r2, [r8]
 80035ec:	e7ec      	b.n	80035c8 <_malloc_r+0xb0>
 80035ee:	4623      	mov	r3, r4
 80035f0:	6864      	ldr	r4, [r4, #4]
 80035f2:	e7ac      	b.n	800354e <_malloc_r+0x36>
 80035f4:	4634      	mov	r4, r6
 80035f6:	6876      	ldr	r6, [r6, #4]
 80035f8:	e7b4      	b.n	8003564 <_malloc_r+0x4c>
 80035fa:	4613      	mov	r3, r2
 80035fc:	e7cc      	b.n	8003598 <_malloc_r+0x80>
 80035fe:	230c      	movs	r3, #12
 8003600:	603b      	str	r3, [r7, #0]
 8003602:	4638      	mov	r0, r7
 8003604:	f000 f80e 	bl	8003624 <__malloc_unlock>
 8003608:	e797      	b.n	800353a <_malloc_r+0x22>
 800360a:	6025      	str	r5, [r4, #0]
 800360c:	e7dc      	b.n	80035c8 <_malloc_r+0xb0>
 800360e:	605b      	str	r3, [r3, #4]
 8003610:	deff      	udf	#255	; 0xff
 8003612:	bf00      	nop
 8003614:	20000258 	.word	0x20000258

08003618 <__malloc_lock>:
 8003618:	4801      	ldr	r0, [pc, #4]	; (8003620 <__malloc_lock+0x8>)
 800361a:	f7ff bf0f 	b.w	800343c <__retarget_lock_acquire_recursive>
 800361e:	bf00      	nop
 8003620:	20000254 	.word	0x20000254

08003624 <__malloc_unlock>:
 8003624:	4801      	ldr	r0, [pc, #4]	; (800362c <__malloc_unlock+0x8>)
 8003626:	f7ff bf0a 	b.w	800343e <__retarget_lock_release_recursive>
 800362a:	bf00      	nop
 800362c:	20000254 	.word	0x20000254

08003630 <__ssputs_r>:
 8003630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003634:	688e      	ldr	r6, [r1, #8]
 8003636:	461f      	mov	r7, r3
 8003638:	42be      	cmp	r6, r7
 800363a:	680b      	ldr	r3, [r1, #0]
 800363c:	4682      	mov	sl, r0
 800363e:	460c      	mov	r4, r1
 8003640:	4690      	mov	r8, r2
 8003642:	d82c      	bhi.n	800369e <__ssputs_r+0x6e>
 8003644:	898a      	ldrh	r2, [r1, #12]
 8003646:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800364a:	d026      	beq.n	800369a <__ssputs_r+0x6a>
 800364c:	6965      	ldr	r5, [r4, #20]
 800364e:	6909      	ldr	r1, [r1, #16]
 8003650:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003654:	eba3 0901 	sub.w	r9, r3, r1
 8003658:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800365c:	1c7b      	adds	r3, r7, #1
 800365e:	444b      	add	r3, r9
 8003660:	106d      	asrs	r5, r5, #1
 8003662:	429d      	cmp	r5, r3
 8003664:	bf38      	it	cc
 8003666:	461d      	movcc	r5, r3
 8003668:	0553      	lsls	r3, r2, #21
 800366a:	d527      	bpl.n	80036bc <__ssputs_r+0x8c>
 800366c:	4629      	mov	r1, r5
 800366e:	f7ff ff53 	bl	8003518 <_malloc_r>
 8003672:	4606      	mov	r6, r0
 8003674:	b360      	cbz	r0, 80036d0 <__ssputs_r+0xa0>
 8003676:	6921      	ldr	r1, [r4, #16]
 8003678:	464a      	mov	r2, r9
 800367a:	f000 faeb 	bl	8003c54 <memcpy>
 800367e:	89a3      	ldrh	r3, [r4, #12]
 8003680:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003688:	81a3      	strh	r3, [r4, #12]
 800368a:	6126      	str	r6, [r4, #16]
 800368c:	6165      	str	r5, [r4, #20]
 800368e:	444e      	add	r6, r9
 8003690:	eba5 0509 	sub.w	r5, r5, r9
 8003694:	6026      	str	r6, [r4, #0]
 8003696:	60a5      	str	r5, [r4, #8]
 8003698:	463e      	mov	r6, r7
 800369a:	42be      	cmp	r6, r7
 800369c:	d900      	bls.n	80036a0 <__ssputs_r+0x70>
 800369e:	463e      	mov	r6, r7
 80036a0:	6820      	ldr	r0, [r4, #0]
 80036a2:	4632      	mov	r2, r6
 80036a4:	4641      	mov	r1, r8
 80036a6:	f000 faab 	bl	8003c00 <memmove>
 80036aa:	68a3      	ldr	r3, [r4, #8]
 80036ac:	1b9b      	subs	r3, r3, r6
 80036ae:	60a3      	str	r3, [r4, #8]
 80036b0:	6823      	ldr	r3, [r4, #0]
 80036b2:	4433      	add	r3, r6
 80036b4:	6023      	str	r3, [r4, #0]
 80036b6:	2000      	movs	r0, #0
 80036b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036bc:	462a      	mov	r2, r5
 80036be:	f000 fad7 	bl	8003c70 <_realloc_r>
 80036c2:	4606      	mov	r6, r0
 80036c4:	2800      	cmp	r0, #0
 80036c6:	d1e0      	bne.n	800368a <__ssputs_r+0x5a>
 80036c8:	6921      	ldr	r1, [r4, #16]
 80036ca:	4650      	mov	r0, sl
 80036cc:	f7ff feb8 	bl	8003440 <_free_r>
 80036d0:	230c      	movs	r3, #12
 80036d2:	f8ca 3000 	str.w	r3, [sl]
 80036d6:	89a3      	ldrh	r3, [r4, #12]
 80036d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036dc:	81a3      	strh	r3, [r4, #12]
 80036de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036e2:	e7e9      	b.n	80036b8 <__ssputs_r+0x88>

080036e4 <_svfiprintf_r>:
 80036e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036e8:	4698      	mov	r8, r3
 80036ea:	898b      	ldrh	r3, [r1, #12]
 80036ec:	061b      	lsls	r3, r3, #24
 80036ee:	b09d      	sub	sp, #116	; 0x74
 80036f0:	4607      	mov	r7, r0
 80036f2:	460d      	mov	r5, r1
 80036f4:	4614      	mov	r4, r2
 80036f6:	d50e      	bpl.n	8003716 <_svfiprintf_r+0x32>
 80036f8:	690b      	ldr	r3, [r1, #16]
 80036fa:	b963      	cbnz	r3, 8003716 <_svfiprintf_r+0x32>
 80036fc:	2140      	movs	r1, #64	; 0x40
 80036fe:	f7ff ff0b 	bl	8003518 <_malloc_r>
 8003702:	6028      	str	r0, [r5, #0]
 8003704:	6128      	str	r0, [r5, #16]
 8003706:	b920      	cbnz	r0, 8003712 <_svfiprintf_r+0x2e>
 8003708:	230c      	movs	r3, #12
 800370a:	603b      	str	r3, [r7, #0]
 800370c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003710:	e0d0      	b.n	80038b4 <_svfiprintf_r+0x1d0>
 8003712:	2340      	movs	r3, #64	; 0x40
 8003714:	616b      	str	r3, [r5, #20]
 8003716:	2300      	movs	r3, #0
 8003718:	9309      	str	r3, [sp, #36]	; 0x24
 800371a:	2320      	movs	r3, #32
 800371c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003720:	f8cd 800c 	str.w	r8, [sp, #12]
 8003724:	2330      	movs	r3, #48	; 0x30
 8003726:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80038cc <_svfiprintf_r+0x1e8>
 800372a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800372e:	f04f 0901 	mov.w	r9, #1
 8003732:	4623      	mov	r3, r4
 8003734:	469a      	mov	sl, r3
 8003736:	f813 2b01 	ldrb.w	r2, [r3], #1
 800373a:	b10a      	cbz	r2, 8003740 <_svfiprintf_r+0x5c>
 800373c:	2a25      	cmp	r2, #37	; 0x25
 800373e:	d1f9      	bne.n	8003734 <_svfiprintf_r+0x50>
 8003740:	ebba 0b04 	subs.w	fp, sl, r4
 8003744:	d00b      	beq.n	800375e <_svfiprintf_r+0x7a>
 8003746:	465b      	mov	r3, fp
 8003748:	4622      	mov	r2, r4
 800374a:	4629      	mov	r1, r5
 800374c:	4638      	mov	r0, r7
 800374e:	f7ff ff6f 	bl	8003630 <__ssputs_r>
 8003752:	3001      	adds	r0, #1
 8003754:	f000 80a9 	beq.w	80038aa <_svfiprintf_r+0x1c6>
 8003758:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800375a:	445a      	add	r2, fp
 800375c:	9209      	str	r2, [sp, #36]	; 0x24
 800375e:	f89a 3000 	ldrb.w	r3, [sl]
 8003762:	2b00      	cmp	r3, #0
 8003764:	f000 80a1 	beq.w	80038aa <_svfiprintf_r+0x1c6>
 8003768:	2300      	movs	r3, #0
 800376a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800376e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003772:	f10a 0a01 	add.w	sl, sl, #1
 8003776:	9304      	str	r3, [sp, #16]
 8003778:	9307      	str	r3, [sp, #28]
 800377a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800377e:	931a      	str	r3, [sp, #104]	; 0x68
 8003780:	4654      	mov	r4, sl
 8003782:	2205      	movs	r2, #5
 8003784:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003788:	4850      	ldr	r0, [pc, #320]	; (80038cc <_svfiprintf_r+0x1e8>)
 800378a:	f7fc fd29 	bl	80001e0 <memchr>
 800378e:	9a04      	ldr	r2, [sp, #16]
 8003790:	b9d8      	cbnz	r0, 80037ca <_svfiprintf_r+0xe6>
 8003792:	06d0      	lsls	r0, r2, #27
 8003794:	bf44      	itt	mi
 8003796:	2320      	movmi	r3, #32
 8003798:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800379c:	0711      	lsls	r1, r2, #28
 800379e:	bf44      	itt	mi
 80037a0:	232b      	movmi	r3, #43	; 0x2b
 80037a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037a6:	f89a 3000 	ldrb.w	r3, [sl]
 80037aa:	2b2a      	cmp	r3, #42	; 0x2a
 80037ac:	d015      	beq.n	80037da <_svfiprintf_r+0xf6>
 80037ae:	9a07      	ldr	r2, [sp, #28]
 80037b0:	4654      	mov	r4, sl
 80037b2:	2000      	movs	r0, #0
 80037b4:	f04f 0c0a 	mov.w	ip, #10
 80037b8:	4621      	mov	r1, r4
 80037ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037be:	3b30      	subs	r3, #48	; 0x30
 80037c0:	2b09      	cmp	r3, #9
 80037c2:	d94d      	bls.n	8003860 <_svfiprintf_r+0x17c>
 80037c4:	b1b0      	cbz	r0, 80037f4 <_svfiprintf_r+0x110>
 80037c6:	9207      	str	r2, [sp, #28]
 80037c8:	e014      	b.n	80037f4 <_svfiprintf_r+0x110>
 80037ca:	eba0 0308 	sub.w	r3, r0, r8
 80037ce:	fa09 f303 	lsl.w	r3, r9, r3
 80037d2:	4313      	orrs	r3, r2
 80037d4:	9304      	str	r3, [sp, #16]
 80037d6:	46a2      	mov	sl, r4
 80037d8:	e7d2      	b.n	8003780 <_svfiprintf_r+0x9c>
 80037da:	9b03      	ldr	r3, [sp, #12]
 80037dc:	1d19      	adds	r1, r3, #4
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	9103      	str	r1, [sp, #12]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	bfbb      	ittet	lt
 80037e6:	425b      	neglt	r3, r3
 80037e8:	f042 0202 	orrlt.w	r2, r2, #2
 80037ec:	9307      	strge	r3, [sp, #28]
 80037ee:	9307      	strlt	r3, [sp, #28]
 80037f0:	bfb8      	it	lt
 80037f2:	9204      	strlt	r2, [sp, #16]
 80037f4:	7823      	ldrb	r3, [r4, #0]
 80037f6:	2b2e      	cmp	r3, #46	; 0x2e
 80037f8:	d10c      	bne.n	8003814 <_svfiprintf_r+0x130>
 80037fa:	7863      	ldrb	r3, [r4, #1]
 80037fc:	2b2a      	cmp	r3, #42	; 0x2a
 80037fe:	d134      	bne.n	800386a <_svfiprintf_r+0x186>
 8003800:	9b03      	ldr	r3, [sp, #12]
 8003802:	1d1a      	adds	r2, r3, #4
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	9203      	str	r2, [sp, #12]
 8003808:	2b00      	cmp	r3, #0
 800380a:	bfb8      	it	lt
 800380c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003810:	3402      	adds	r4, #2
 8003812:	9305      	str	r3, [sp, #20]
 8003814:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80038dc <_svfiprintf_r+0x1f8>
 8003818:	7821      	ldrb	r1, [r4, #0]
 800381a:	2203      	movs	r2, #3
 800381c:	4650      	mov	r0, sl
 800381e:	f7fc fcdf 	bl	80001e0 <memchr>
 8003822:	b138      	cbz	r0, 8003834 <_svfiprintf_r+0x150>
 8003824:	9b04      	ldr	r3, [sp, #16]
 8003826:	eba0 000a 	sub.w	r0, r0, sl
 800382a:	2240      	movs	r2, #64	; 0x40
 800382c:	4082      	lsls	r2, r0
 800382e:	4313      	orrs	r3, r2
 8003830:	3401      	adds	r4, #1
 8003832:	9304      	str	r3, [sp, #16]
 8003834:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003838:	4825      	ldr	r0, [pc, #148]	; (80038d0 <_svfiprintf_r+0x1ec>)
 800383a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800383e:	2206      	movs	r2, #6
 8003840:	f7fc fcce 	bl	80001e0 <memchr>
 8003844:	2800      	cmp	r0, #0
 8003846:	d038      	beq.n	80038ba <_svfiprintf_r+0x1d6>
 8003848:	4b22      	ldr	r3, [pc, #136]	; (80038d4 <_svfiprintf_r+0x1f0>)
 800384a:	bb1b      	cbnz	r3, 8003894 <_svfiprintf_r+0x1b0>
 800384c:	9b03      	ldr	r3, [sp, #12]
 800384e:	3307      	adds	r3, #7
 8003850:	f023 0307 	bic.w	r3, r3, #7
 8003854:	3308      	adds	r3, #8
 8003856:	9303      	str	r3, [sp, #12]
 8003858:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800385a:	4433      	add	r3, r6
 800385c:	9309      	str	r3, [sp, #36]	; 0x24
 800385e:	e768      	b.n	8003732 <_svfiprintf_r+0x4e>
 8003860:	fb0c 3202 	mla	r2, ip, r2, r3
 8003864:	460c      	mov	r4, r1
 8003866:	2001      	movs	r0, #1
 8003868:	e7a6      	b.n	80037b8 <_svfiprintf_r+0xd4>
 800386a:	2300      	movs	r3, #0
 800386c:	3401      	adds	r4, #1
 800386e:	9305      	str	r3, [sp, #20]
 8003870:	4619      	mov	r1, r3
 8003872:	f04f 0c0a 	mov.w	ip, #10
 8003876:	4620      	mov	r0, r4
 8003878:	f810 2b01 	ldrb.w	r2, [r0], #1
 800387c:	3a30      	subs	r2, #48	; 0x30
 800387e:	2a09      	cmp	r2, #9
 8003880:	d903      	bls.n	800388a <_svfiprintf_r+0x1a6>
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0c6      	beq.n	8003814 <_svfiprintf_r+0x130>
 8003886:	9105      	str	r1, [sp, #20]
 8003888:	e7c4      	b.n	8003814 <_svfiprintf_r+0x130>
 800388a:	fb0c 2101 	mla	r1, ip, r1, r2
 800388e:	4604      	mov	r4, r0
 8003890:	2301      	movs	r3, #1
 8003892:	e7f0      	b.n	8003876 <_svfiprintf_r+0x192>
 8003894:	ab03      	add	r3, sp, #12
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	462a      	mov	r2, r5
 800389a:	4b0f      	ldr	r3, [pc, #60]	; (80038d8 <_svfiprintf_r+0x1f4>)
 800389c:	a904      	add	r1, sp, #16
 800389e:	4638      	mov	r0, r7
 80038a0:	f3af 8000 	nop.w
 80038a4:	1c42      	adds	r2, r0, #1
 80038a6:	4606      	mov	r6, r0
 80038a8:	d1d6      	bne.n	8003858 <_svfiprintf_r+0x174>
 80038aa:	89ab      	ldrh	r3, [r5, #12]
 80038ac:	065b      	lsls	r3, r3, #25
 80038ae:	f53f af2d 	bmi.w	800370c <_svfiprintf_r+0x28>
 80038b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038b4:	b01d      	add	sp, #116	; 0x74
 80038b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038ba:	ab03      	add	r3, sp, #12
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	462a      	mov	r2, r5
 80038c0:	4b05      	ldr	r3, [pc, #20]	; (80038d8 <_svfiprintf_r+0x1f4>)
 80038c2:	a904      	add	r1, sp, #16
 80038c4:	4638      	mov	r0, r7
 80038c6:	f000 f879 	bl	80039bc <_printf_i>
 80038ca:	e7eb      	b.n	80038a4 <_svfiprintf_r+0x1c0>
 80038cc:	08003d18 	.word	0x08003d18
 80038d0:	08003d22 	.word	0x08003d22
 80038d4:	00000000 	.word	0x00000000
 80038d8:	08003631 	.word	0x08003631
 80038dc:	08003d1e 	.word	0x08003d1e

080038e0 <_printf_common>:
 80038e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038e4:	4616      	mov	r6, r2
 80038e6:	4699      	mov	r9, r3
 80038e8:	688a      	ldr	r2, [r1, #8]
 80038ea:	690b      	ldr	r3, [r1, #16]
 80038ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80038f0:	4293      	cmp	r3, r2
 80038f2:	bfb8      	it	lt
 80038f4:	4613      	movlt	r3, r2
 80038f6:	6033      	str	r3, [r6, #0]
 80038f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80038fc:	4607      	mov	r7, r0
 80038fe:	460c      	mov	r4, r1
 8003900:	b10a      	cbz	r2, 8003906 <_printf_common+0x26>
 8003902:	3301      	adds	r3, #1
 8003904:	6033      	str	r3, [r6, #0]
 8003906:	6823      	ldr	r3, [r4, #0]
 8003908:	0699      	lsls	r1, r3, #26
 800390a:	bf42      	ittt	mi
 800390c:	6833      	ldrmi	r3, [r6, #0]
 800390e:	3302      	addmi	r3, #2
 8003910:	6033      	strmi	r3, [r6, #0]
 8003912:	6825      	ldr	r5, [r4, #0]
 8003914:	f015 0506 	ands.w	r5, r5, #6
 8003918:	d106      	bne.n	8003928 <_printf_common+0x48>
 800391a:	f104 0a19 	add.w	sl, r4, #25
 800391e:	68e3      	ldr	r3, [r4, #12]
 8003920:	6832      	ldr	r2, [r6, #0]
 8003922:	1a9b      	subs	r3, r3, r2
 8003924:	42ab      	cmp	r3, r5
 8003926:	dc26      	bgt.n	8003976 <_printf_common+0x96>
 8003928:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800392c:	1e13      	subs	r3, r2, #0
 800392e:	6822      	ldr	r2, [r4, #0]
 8003930:	bf18      	it	ne
 8003932:	2301      	movne	r3, #1
 8003934:	0692      	lsls	r2, r2, #26
 8003936:	d42b      	bmi.n	8003990 <_printf_common+0xb0>
 8003938:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800393c:	4649      	mov	r1, r9
 800393e:	4638      	mov	r0, r7
 8003940:	47c0      	blx	r8
 8003942:	3001      	adds	r0, #1
 8003944:	d01e      	beq.n	8003984 <_printf_common+0xa4>
 8003946:	6823      	ldr	r3, [r4, #0]
 8003948:	6922      	ldr	r2, [r4, #16]
 800394a:	f003 0306 	and.w	r3, r3, #6
 800394e:	2b04      	cmp	r3, #4
 8003950:	bf02      	ittt	eq
 8003952:	68e5      	ldreq	r5, [r4, #12]
 8003954:	6833      	ldreq	r3, [r6, #0]
 8003956:	1aed      	subeq	r5, r5, r3
 8003958:	68a3      	ldr	r3, [r4, #8]
 800395a:	bf0c      	ite	eq
 800395c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003960:	2500      	movne	r5, #0
 8003962:	4293      	cmp	r3, r2
 8003964:	bfc4      	itt	gt
 8003966:	1a9b      	subgt	r3, r3, r2
 8003968:	18ed      	addgt	r5, r5, r3
 800396a:	2600      	movs	r6, #0
 800396c:	341a      	adds	r4, #26
 800396e:	42b5      	cmp	r5, r6
 8003970:	d11a      	bne.n	80039a8 <_printf_common+0xc8>
 8003972:	2000      	movs	r0, #0
 8003974:	e008      	b.n	8003988 <_printf_common+0xa8>
 8003976:	2301      	movs	r3, #1
 8003978:	4652      	mov	r2, sl
 800397a:	4649      	mov	r1, r9
 800397c:	4638      	mov	r0, r7
 800397e:	47c0      	blx	r8
 8003980:	3001      	adds	r0, #1
 8003982:	d103      	bne.n	800398c <_printf_common+0xac>
 8003984:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800398c:	3501      	adds	r5, #1
 800398e:	e7c6      	b.n	800391e <_printf_common+0x3e>
 8003990:	18e1      	adds	r1, r4, r3
 8003992:	1c5a      	adds	r2, r3, #1
 8003994:	2030      	movs	r0, #48	; 0x30
 8003996:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800399a:	4422      	add	r2, r4
 800399c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039a4:	3302      	adds	r3, #2
 80039a6:	e7c7      	b.n	8003938 <_printf_common+0x58>
 80039a8:	2301      	movs	r3, #1
 80039aa:	4622      	mov	r2, r4
 80039ac:	4649      	mov	r1, r9
 80039ae:	4638      	mov	r0, r7
 80039b0:	47c0      	blx	r8
 80039b2:	3001      	adds	r0, #1
 80039b4:	d0e6      	beq.n	8003984 <_printf_common+0xa4>
 80039b6:	3601      	adds	r6, #1
 80039b8:	e7d9      	b.n	800396e <_printf_common+0x8e>
	...

080039bc <_printf_i>:
 80039bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039c0:	7e0f      	ldrb	r7, [r1, #24]
 80039c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80039c4:	2f78      	cmp	r7, #120	; 0x78
 80039c6:	4691      	mov	r9, r2
 80039c8:	4680      	mov	r8, r0
 80039ca:	460c      	mov	r4, r1
 80039cc:	469a      	mov	sl, r3
 80039ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80039d2:	d807      	bhi.n	80039e4 <_printf_i+0x28>
 80039d4:	2f62      	cmp	r7, #98	; 0x62
 80039d6:	d80a      	bhi.n	80039ee <_printf_i+0x32>
 80039d8:	2f00      	cmp	r7, #0
 80039da:	f000 80d4 	beq.w	8003b86 <_printf_i+0x1ca>
 80039de:	2f58      	cmp	r7, #88	; 0x58
 80039e0:	f000 80c0 	beq.w	8003b64 <_printf_i+0x1a8>
 80039e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80039ec:	e03a      	b.n	8003a64 <_printf_i+0xa8>
 80039ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80039f2:	2b15      	cmp	r3, #21
 80039f4:	d8f6      	bhi.n	80039e4 <_printf_i+0x28>
 80039f6:	a101      	add	r1, pc, #4	; (adr r1, 80039fc <_printf_i+0x40>)
 80039f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80039fc:	08003a55 	.word	0x08003a55
 8003a00:	08003a69 	.word	0x08003a69
 8003a04:	080039e5 	.word	0x080039e5
 8003a08:	080039e5 	.word	0x080039e5
 8003a0c:	080039e5 	.word	0x080039e5
 8003a10:	080039e5 	.word	0x080039e5
 8003a14:	08003a69 	.word	0x08003a69
 8003a18:	080039e5 	.word	0x080039e5
 8003a1c:	080039e5 	.word	0x080039e5
 8003a20:	080039e5 	.word	0x080039e5
 8003a24:	080039e5 	.word	0x080039e5
 8003a28:	08003b6d 	.word	0x08003b6d
 8003a2c:	08003a95 	.word	0x08003a95
 8003a30:	08003b27 	.word	0x08003b27
 8003a34:	080039e5 	.word	0x080039e5
 8003a38:	080039e5 	.word	0x080039e5
 8003a3c:	08003b8f 	.word	0x08003b8f
 8003a40:	080039e5 	.word	0x080039e5
 8003a44:	08003a95 	.word	0x08003a95
 8003a48:	080039e5 	.word	0x080039e5
 8003a4c:	080039e5 	.word	0x080039e5
 8003a50:	08003b2f 	.word	0x08003b2f
 8003a54:	682b      	ldr	r3, [r5, #0]
 8003a56:	1d1a      	adds	r2, r3, #4
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	602a      	str	r2, [r5, #0]
 8003a5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a64:	2301      	movs	r3, #1
 8003a66:	e09f      	b.n	8003ba8 <_printf_i+0x1ec>
 8003a68:	6820      	ldr	r0, [r4, #0]
 8003a6a:	682b      	ldr	r3, [r5, #0]
 8003a6c:	0607      	lsls	r7, r0, #24
 8003a6e:	f103 0104 	add.w	r1, r3, #4
 8003a72:	6029      	str	r1, [r5, #0]
 8003a74:	d501      	bpl.n	8003a7a <_printf_i+0xbe>
 8003a76:	681e      	ldr	r6, [r3, #0]
 8003a78:	e003      	b.n	8003a82 <_printf_i+0xc6>
 8003a7a:	0646      	lsls	r6, r0, #25
 8003a7c:	d5fb      	bpl.n	8003a76 <_printf_i+0xba>
 8003a7e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003a82:	2e00      	cmp	r6, #0
 8003a84:	da03      	bge.n	8003a8e <_printf_i+0xd2>
 8003a86:	232d      	movs	r3, #45	; 0x2d
 8003a88:	4276      	negs	r6, r6
 8003a8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a8e:	485a      	ldr	r0, [pc, #360]	; (8003bf8 <_printf_i+0x23c>)
 8003a90:	230a      	movs	r3, #10
 8003a92:	e012      	b.n	8003aba <_printf_i+0xfe>
 8003a94:	682b      	ldr	r3, [r5, #0]
 8003a96:	6820      	ldr	r0, [r4, #0]
 8003a98:	1d19      	adds	r1, r3, #4
 8003a9a:	6029      	str	r1, [r5, #0]
 8003a9c:	0605      	lsls	r5, r0, #24
 8003a9e:	d501      	bpl.n	8003aa4 <_printf_i+0xe8>
 8003aa0:	681e      	ldr	r6, [r3, #0]
 8003aa2:	e002      	b.n	8003aaa <_printf_i+0xee>
 8003aa4:	0641      	lsls	r1, r0, #25
 8003aa6:	d5fb      	bpl.n	8003aa0 <_printf_i+0xe4>
 8003aa8:	881e      	ldrh	r6, [r3, #0]
 8003aaa:	4853      	ldr	r0, [pc, #332]	; (8003bf8 <_printf_i+0x23c>)
 8003aac:	2f6f      	cmp	r7, #111	; 0x6f
 8003aae:	bf0c      	ite	eq
 8003ab0:	2308      	moveq	r3, #8
 8003ab2:	230a      	movne	r3, #10
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003aba:	6865      	ldr	r5, [r4, #4]
 8003abc:	60a5      	str	r5, [r4, #8]
 8003abe:	2d00      	cmp	r5, #0
 8003ac0:	bfa2      	ittt	ge
 8003ac2:	6821      	ldrge	r1, [r4, #0]
 8003ac4:	f021 0104 	bicge.w	r1, r1, #4
 8003ac8:	6021      	strge	r1, [r4, #0]
 8003aca:	b90e      	cbnz	r6, 8003ad0 <_printf_i+0x114>
 8003acc:	2d00      	cmp	r5, #0
 8003ace:	d04b      	beq.n	8003b68 <_printf_i+0x1ac>
 8003ad0:	4615      	mov	r5, r2
 8003ad2:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ad6:	fb03 6711 	mls	r7, r3, r1, r6
 8003ada:	5dc7      	ldrb	r7, [r0, r7]
 8003adc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ae0:	4637      	mov	r7, r6
 8003ae2:	42bb      	cmp	r3, r7
 8003ae4:	460e      	mov	r6, r1
 8003ae6:	d9f4      	bls.n	8003ad2 <_printf_i+0x116>
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	d10b      	bne.n	8003b04 <_printf_i+0x148>
 8003aec:	6823      	ldr	r3, [r4, #0]
 8003aee:	07de      	lsls	r6, r3, #31
 8003af0:	d508      	bpl.n	8003b04 <_printf_i+0x148>
 8003af2:	6923      	ldr	r3, [r4, #16]
 8003af4:	6861      	ldr	r1, [r4, #4]
 8003af6:	4299      	cmp	r1, r3
 8003af8:	bfde      	ittt	le
 8003afa:	2330      	movle	r3, #48	; 0x30
 8003afc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b00:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003b04:	1b52      	subs	r2, r2, r5
 8003b06:	6122      	str	r2, [r4, #16]
 8003b08:	f8cd a000 	str.w	sl, [sp]
 8003b0c:	464b      	mov	r3, r9
 8003b0e:	aa03      	add	r2, sp, #12
 8003b10:	4621      	mov	r1, r4
 8003b12:	4640      	mov	r0, r8
 8003b14:	f7ff fee4 	bl	80038e0 <_printf_common>
 8003b18:	3001      	adds	r0, #1
 8003b1a:	d14a      	bne.n	8003bb2 <_printf_i+0x1f6>
 8003b1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b20:	b004      	add	sp, #16
 8003b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b26:	6823      	ldr	r3, [r4, #0]
 8003b28:	f043 0320 	orr.w	r3, r3, #32
 8003b2c:	6023      	str	r3, [r4, #0]
 8003b2e:	4833      	ldr	r0, [pc, #204]	; (8003bfc <_printf_i+0x240>)
 8003b30:	2778      	movs	r7, #120	; 0x78
 8003b32:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003b36:	6823      	ldr	r3, [r4, #0]
 8003b38:	6829      	ldr	r1, [r5, #0]
 8003b3a:	061f      	lsls	r7, r3, #24
 8003b3c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b40:	d402      	bmi.n	8003b48 <_printf_i+0x18c>
 8003b42:	065f      	lsls	r7, r3, #25
 8003b44:	bf48      	it	mi
 8003b46:	b2b6      	uxthmi	r6, r6
 8003b48:	07df      	lsls	r7, r3, #31
 8003b4a:	bf48      	it	mi
 8003b4c:	f043 0320 	orrmi.w	r3, r3, #32
 8003b50:	6029      	str	r1, [r5, #0]
 8003b52:	bf48      	it	mi
 8003b54:	6023      	strmi	r3, [r4, #0]
 8003b56:	b91e      	cbnz	r6, 8003b60 <_printf_i+0x1a4>
 8003b58:	6823      	ldr	r3, [r4, #0]
 8003b5a:	f023 0320 	bic.w	r3, r3, #32
 8003b5e:	6023      	str	r3, [r4, #0]
 8003b60:	2310      	movs	r3, #16
 8003b62:	e7a7      	b.n	8003ab4 <_printf_i+0xf8>
 8003b64:	4824      	ldr	r0, [pc, #144]	; (8003bf8 <_printf_i+0x23c>)
 8003b66:	e7e4      	b.n	8003b32 <_printf_i+0x176>
 8003b68:	4615      	mov	r5, r2
 8003b6a:	e7bd      	b.n	8003ae8 <_printf_i+0x12c>
 8003b6c:	682b      	ldr	r3, [r5, #0]
 8003b6e:	6826      	ldr	r6, [r4, #0]
 8003b70:	6961      	ldr	r1, [r4, #20]
 8003b72:	1d18      	adds	r0, r3, #4
 8003b74:	6028      	str	r0, [r5, #0]
 8003b76:	0635      	lsls	r5, r6, #24
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	d501      	bpl.n	8003b80 <_printf_i+0x1c4>
 8003b7c:	6019      	str	r1, [r3, #0]
 8003b7e:	e002      	b.n	8003b86 <_printf_i+0x1ca>
 8003b80:	0670      	lsls	r0, r6, #25
 8003b82:	d5fb      	bpl.n	8003b7c <_printf_i+0x1c0>
 8003b84:	8019      	strh	r1, [r3, #0]
 8003b86:	2300      	movs	r3, #0
 8003b88:	6123      	str	r3, [r4, #16]
 8003b8a:	4615      	mov	r5, r2
 8003b8c:	e7bc      	b.n	8003b08 <_printf_i+0x14c>
 8003b8e:	682b      	ldr	r3, [r5, #0]
 8003b90:	1d1a      	adds	r2, r3, #4
 8003b92:	602a      	str	r2, [r5, #0]
 8003b94:	681d      	ldr	r5, [r3, #0]
 8003b96:	6862      	ldr	r2, [r4, #4]
 8003b98:	2100      	movs	r1, #0
 8003b9a:	4628      	mov	r0, r5
 8003b9c:	f7fc fb20 	bl	80001e0 <memchr>
 8003ba0:	b108      	cbz	r0, 8003ba6 <_printf_i+0x1ea>
 8003ba2:	1b40      	subs	r0, r0, r5
 8003ba4:	6060      	str	r0, [r4, #4]
 8003ba6:	6863      	ldr	r3, [r4, #4]
 8003ba8:	6123      	str	r3, [r4, #16]
 8003baa:	2300      	movs	r3, #0
 8003bac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bb0:	e7aa      	b.n	8003b08 <_printf_i+0x14c>
 8003bb2:	6923      	ldr	r3, [r4, #16]
 8003bb4:	462a      	mov	r2, r5
 8003bb6:	4649      	mov	r1, r9
 8003bb8:	4640      	mov	r0, r8
 8003bba:	47d0      	blx	sl
 8003bbc:	3001      	adds	r0, #1
 8003bbe:	d0ad      	beq.n	8003b1c <_printf_i+0x160>
 8003bc0:	6823      	ldr	r3, [r4, #0]
 8003bc2:	079b      	lsls	r3, r3, #30
 8003bc4:	d413      	bmi.n	8003bee <_printf_i+0x232>
 8003bc6:	68e0      	ldr	r0, [r4, #12]
 8003bc8:	9b03      	ldr	r3, [sp, #12]
 8003bca:	4298      	cmp	r0, r3
 8003bcc:	bfb8      	it	lt
 8003bce:	4618      	movlt	r0, r3
 8003bd0:	e7a6      	b.n	8003b20 <_printf_i+0x164>
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	4632      	mov	r2, r6
 8003bd6:	4649      	mov	r1, r9
 8003bd8:	4640      	mov	r0, r8
 8003bda:	47d0      	blx	sl
 8003bdc:	3001      	adds	r0, #1
 8003bde:	d09d      	beq.n	8003b1c <_printf_i+0x160>
 8003be0:	3501      	adds	r5, #1
 8003be2:	68e3      	ldr	r3, [r4, #12]
 8003be4:	9903      	ldr	r1, [sp, #12]
 8003be6:	1a5b      	subs	r3, r3, r1
 8003be8:	42ab      	cmp	r3, r5
 8003bea:	dcf2      	bgt.n	8003bd2 <_printf_i+0x216>
 8003bec:	e7eb      	b.n	8003bc6 <_printf_i+0x20a>
 8003bee:	2500      	movs	r5, #0
 8003bf0:	f104 0619 	add.w	r6, r4, #25
 8003bf4:	e7f5      	b.n	8003be2 <_printf_i+0x226>
 8003bf6:	bf00      	nop
 8003bf8:	08003d29 	.word	0x08003d29
 8003bfc:	08003d3a 	.word	0x08003d3a

08003c00 <memmove>:
 8003c00:	4288      	cmp	r0, r1
 8003c02:	b510      	push	{r4, lr}
 8003c04:	eb01 0402 	add.w	r4, r1, r2
 8003c08:	d902      	bls.n	8003c10 <memmove+0x10>
 8003c0a:	4284      	cmp	r4, r0
 8003c0c:	4623      	mov	r3, r4
 8003c0e:	d807      	bhi.n	8003c20 <memmove+0x20>
 8003c10:	1e43      	subs	r3, r0, #1
 8003c12:	42a1      	cmp	r1, r4
 8003c14:	d008      	beq.n	8003c28 <memmove+0x28>
 8003c16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c1e:	e7f8      	b.n	8003c12 <memmove+0x12>
 8003c20:	4402      	add	r2, r0
 8003c22:	4601      	mov	r1, r0
 8003c24:	428a      	cmp	r2, r1
 8003c26:	d100      	bne.n	8003c2a <memmove+0x2a>
 8003c28:	bd10      	pop	{r4, pc}
 8003c2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003c32:	e7f7      	b.n	8003c24 <memmove+0x24>

08003c34 <_sbrk_r>:
 8003c34:	b538      	push	{r3, r4, r5, lr}
 8003c36:	4d06      	ldr	r5, [pc, #24]	; (8003c50 <_sbrk_r+0x1c>)
 8003c38:	2300      	movs	r3, #0
 8003c3a:	4604      	mov	r4, r0
 8003c3c:	4608      	mov	r0, r1
 8003c3e:	602b      	str	r3, [r5, #0]
 8003c40:	f7fc ffb6 	bl	8000bb0 <_sbrk>
 8003c44:	1c43      	adds	r3, r0, #1
 8003c46:	d102      	bne.n	8003c4e <_sbrk_r+0x1a>
 8003c48:	682b      	ldr	r3, [r5, #0]
 8003c4a:	b103      	cbz	r3, 8003c4e <_sbrk_r+0x1a>
 8003c4c:	6023      	str	r3, [r4, #0]
 8003c4e:	bd38      	pop	{r3, r4, r5, pc}
 8003c50:	20000250 	.word	0x20000250

08003c54 <memcpy>:
 8003c54:	440a      	add	r2, r1
 8003c56:	4291      	cmp	r1, r2
 8003c58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003c5c:	d100      	bne.n	8003c60 <memcpy+0xc>
 8003c5e:	4770      	bx	lr
 8003c60:	b510      	push	{r4, lr}
 8003c62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c6a:	4291      	cmp	r1, r2
 8003c6c:	d1f9      	bne.n	8003c62 <memcpy+0xe>
 8003c6e:	bd10      	pop	{r4, pc}

08003c70 <_realloc_r>:
 8003c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c74:	4680      	mov	r8, r0
 8003c76:	4614      	mov	r4, r2
 8003c78:	460e      	mov	r6, r1
 8003c7a:	b921      	cbnz	r1, 8003c86 <_realloc_r+0x16>
 8003c7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c80:	4611      	mov	r1, r2
 8003c82:	f7ff bc49 	b.w	8003518 <_malloc_r>
 8003c86:	b92a      	cbnz	r2, 8003c94 <_realloc_r+0x24>
 8003c88:	f7ff fbda 	bl	8003440 <_free_r>
 8003c8c:	4625      	mov	r5, r4
 8003c8e:	4628      	mov	r0, r5
 8003c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c94:	f000 f81b 	bl	8003cce <_malloc_usable_size_r>
 8003c98:	4284      	cmp	r4, r0
 8003c9a:	4607      	mov	r7, r0
 8003c9c:	d802      	bhi.n	8003ca4 <_realloc_r+0x34>
 8003c9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003ca2:	d812      	bhi.n	8003cca <_realloc_r+0x5a>
 8003ca4:	4621      	mov	r1, r4
 8003ca6:	4640      	mov	r0, r8
 8003ca8:	f7ff fc36 	bl	8003518 <_malloc_r>
 8003cac:	4605      	mov	r5, r0
 8003cae:	2800      	cmp	r0, #0
 8003cb0:	d0ed      	beq.n	8003c8e <_realloc_r+0x1e>
 8003cb2:	42bc      	cmp	r4, r7
 8003cb4:	4622      	mov	r2, r4
 8003cb6:	4631      	mov	r1, r6
 8003cb8:	bf28      	it	cs
 8003cba:	463a      	movcs	r2, r7
 8003cbc:	f7ff ffca 	bl	8003c54 <memcpy>
 8003cc0:	4631      	mov	r1, r6
 8003cc2:	4640      	mov	r0, r8
 8003cc4:	f7ff fbbc 	bl	8003440 <_free_r>
 8003cc8:	e7e1      	b.n	8003c8e <_realloc_r+0x1e>
 8003cca:	4635      	mov	r5, r6
 8003ccc:	e7df      	b.n	8003c8e <_realloc_r+0x1e>

08003cce <_malloc_usable_size_r>:
 8003cce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cd2:	1f18      	subs	r0, r3, #4
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	bfbc      	itt	lt
 8003cd8:	580b      	ldrlt	r3, [r1, r0]
 8003cda:	18c0      	addlt	r0, r0, r3
 8003cdc:	4770      	bx	lr
	...

08003ce0 <_init>:
 8003ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ce2:	bf00      	nop
 8003ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ce6:	bc08      	pop	{r3}
 8003ce8:	469e      	mov	lr, r3
 8003cea:	4770      	bx	lr

08003cec <_fini>:
 8003cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cee:	bf00      	nop
 8003cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cf2:	bc08      	pop	{r3}
 8003cf4:	469e      	mov	lr, r3
 8003cf6:	4770      	bx	lr
